<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HIS.Systems</name>
    </assembly>
    <members>
        <member name="T:HIS.Systems.HISEnvironment">
            <summary>
            系統環境延伸類別方法.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISEnvironment.CommandLineArgs">
            <summary>
            命令列參數.
            </summary>
            <example>
            讀取命令列參數值 Help, 預設值使用大寫 N :
            <code>
            string sHelp;
            //
            sHelp = this.CommandLineArgs.GetString("Help", "N").ToUpper();
            if (sHelp == "Y")
              ...
            </code>
            </example>
            <remarks><i>CommandLineArgs</i> 屬性使用, 詳細請參考 <see cref="T:HIS.Systems.HISNameValueDictionary">HISNameValueDictionary</see> 類別型態.</remarks>
        </member>
        <member name="T:HIS.Systems.HISStartInfo">
            <summary>
            HIS 系統啟動資訊.
            </summary>
            <remarks>
            HIS 系統登入程式啟動 HIS 程式時設定 HIS 系統環境變數數值之用或 HIS 系統於 Client 端需要取得使用者登入資訊時使用. 
            <br/><br/>
            <b>注意 :</b> HISStartInfo 類別為讀取程式執行端的登入資訊, 但執行端不代表 Client 端. Server 端讀取使用者資訊必須使用用戶端傳入的使用者資訊物件(HISParams.ClientInfo).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.GetUser(System.String)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <returns>使用者資料, 為讀取環境變數, 如 USER_Section 等.</returns>
            <remarks>若使用者資料可能為空值則應使用 HISStartInfo.GetUser(sKey, "") 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.GetUser(System.String,System.Int32)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <param name="iType">整數型態(HISConst.TYPE_Int).</param>
            <returns>使用者資料, 為讀取環境變數, 如 USER_Section 等.</returns>
            <remarks>若使用者資料可能為空值則應使用 HISStartInfo.GetUser(sKey, 0, HISConst.TYPE_Int) 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.GetUser(System.String,System.String)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <param name="sAlternative">替代數值.</param>
            <returns>使用者資料, 為讀取環境變數, 如 USER_Section 等.</returns>
            <remarks>若使用者資料可能為空值則應使用 HISStartInfo.GetUser(sKey, "") 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.GetUser(System.String,System.Int32,System.Int32)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <param name="iAlternative">替代數值.</param>
            <param name="iType">整數型態(HISConst.TYPE_Int).</param>
            <returns>使用者資料, 為讀取環境變數, 如 USER_Section 等.</returns>
            <remarks>若使用者資料可能為空值則應使用 HISStartInfo.GetUser(sKey, 0, HISConst.TYPE_Int) 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.GetVariable(System.String)">
            <summary>
            限內部使用.
            </summary>
            <param name="sVariable"></param>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.GetVariable(System.String,System.Boolean)">
            <summary>
            限內部使用.
            </summary>
            <param name="sVariable"></param>
            <param name="bUpperCase"></param>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISStartInfo.SetVariable(System.Diagnostics.ProcessStartInfo,System.String,System.String)">
            <summary>
            限內部使用.
            </summary>
            <param name="StartInfo"></param>
            <param name="sVariable"></param>
            <param name="Value"></param>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.UserID">
            <summary>
            目前執行桯式的使用者代碼.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.UserName">
            <summary>
            目前執行桯式的使用者名稱.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.ProgramNo">
            <summary>
            停用, 程式代碼視窗中應使用 this.ProgramNo.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.ProgramName">
            <summary>
            停用.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.HospitalArea">
            <summary>
            院區.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.SystemID">
            <summary>
            傳回目前執行程式的系統代碼(即程式檔案名稱, 不含副檔名), 一律轉換為大寫,  如 C:\HIS\SysPrj.exe 的 SYSPRJ 等.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.SystemArea">
            <summary>
            系統區域.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.MachineName">
            <summary>
            目前執行程式的電腦名稱.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.IPAddress">
            <summary>
            目前執行程式的電腦 IP 位址.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISStartInfo.StartSystemID">
            <summary>
            目前執行程式功能的啟動系統代碼(若程式功能由其他系統引用則啟動系統代碼不一定等於程式功能的原始系統代碼).
            </summary>
        </member>
        <member name="T:HIS.Systems.HISPadValue">
            <summary>
            數值補足方法類別.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISPadValue.LocalYM(System.String)">
            <summary>
            Local 年月補足 0.
            </summary>
            <param name="sLocalYM">Local 年月.</param>
            <returns>補足後 Local 日期.</returns>
        </member>
        <member name="M:HIS.Systems.HISPadValue.LocalDate(System.String)">
            <summary>
            Local 日期補足 0.
            </summary>
            <param name="sDate">Local 日期.</param>
            <returns>Local 日期, 往前補足 0 至足碼.</returns>
        </member>
        <member name="M:HIS.Systems.HISPadValue.Time(System.String)">
            <summary>
            時間補足(時分秒 6 碼).
            </summary>
            <param name="sTime">時間.</param>
            <returns>時間, 先往前補足 0 至 4 碼(時分), 再往後補足 0 至足碼(秒).</returns>
        </member>
        <member name="M:HIS.Systems.HISPadValue.HHISNum(System.String)">
            <summary>
            病歷號碼補足(英文字母大寫).
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISPadValue.StampID(System.String)">
            <summary>
            醫師章號(英文字母大寫).
            </summary>
            <param name="Value">醫師章號.</param>
            <returns>醫師章號.</returns>
        </member>
        <member name="M:HIS.Systems.HISDirectory.GetCurrentPath">
            <summary>
            讀取目前執行檔案的路徑.
            </summary>
            <returns>目前執行檔案的路徑(以目錄分隔字元結尾), 如 C:\Windows\ 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDirectory.RestoreDirectory">
            <summary>
            還原執行程式的目前路徑.
            </summary>
            <returns>
            執行程式的目前路徑, 即程式檔案的原始執行位置.
            <br/><br/>
            若還原執行程式的目前路徑發生錯誤將不引發例外並傳回預設目前路徑(即 Directory.GetCurrentDirectory() 方法).
            </returns>
            <remarks>
            因為若列印目標為檔案(非實體印表機)或對話盒元件的操作等, 以上情況皆可能造成執行程式的目前路徑非預期的變更, 因此執行此方法還原執行程式的目前路徑.
            <br/><br/>
            若使用 OpenFileDialog, SaveFileDialog 等元件, 應設定 RestoreDirectory 屬性為 true (預設值為 false) 以避免使用者變更路徑造成
            程式目前目錄非預期變更造成程式執行錯誤.
            <br/><br/>
            限內部使用.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDirectory.GetDirectories(System.String)">
            <summary>
            讀取指定路徑的子資料夾路徑(No recursive).
            </summary>
            <param name="sPath">指定路徑, 如 C:\Folder1 等.</param>
            <returns>指定路徑中<b>全部</b>的子資料夾路徑.</returns>
            <remarks>
            若指定路徑不存在則直接傳回空陣列不引發例外. 若指定路徑為作業系統的 System Volume Information 則傳回空陣列(因為若直接存取該資料夾將發生錯誤).
            <br/><br/>
            *.NET 內建 <i>Directory.GetDirectories()</i> 方法若路徑不存在將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDirectory.GetDirectories(System.String,System.String)">
            <summary>
            讀取指定路徑的子資料夾路徑(No recursive).
            </summary>
            <param name="sPath">指定路徑, 如 C:\Folder1 等.</param>
            <param name="sSearchPattern">搜尋條件.</param>
            <returns>指定路徑中<b>符合搜尋條件</b>的子資料夾路徑.</returns>
            <remarks>
            若指定路徑不存在則直接傳回空陣列不引發例外. 若指定路徑為作業系統的 System Volume Information 則傳回空陣列(因為若直接存取該資料夾將發生錯誤).
            <br/><br/>
            *.NET 內建 <i>Directory.GetDirectories()</i> 方法若路徑不存在將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDirectory.GetFileSystemEntries(System.String)">
            <summary>
            讀取指定路徑的檔案及子資料夾路徑(No recursive).
            </summary>
            <param name="sPath">指定路徑, 如 C:\Folder1 等.</param>
            <returns>指定路徑中<b>全部</b>的檔案及子資料夾路徑.</returns>
            <remarks>
            若指定路徑不存在則直接傳回空陣列不引發例外. 若指定路徑為作業系統的 System Volume Information 則傳回空陣列(因為若直接存取該資料夾將發生錯誤).
            <br/><br/>
            *.NET 內建 <i>Directory.GetDirectories()</i> 方法若路徑不存在將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            讀取指定路徑的檔案及子資料夾路徑(No recursive).
            </summary>
            <param name="sPath">指定路徑, 如 C:\Folder1 等.</param>
            <param name="sSearchPattern">搜尋條件.</param>
            <returns>指定路徑中<b>符合搜尋條件</b>的檔案及子資料夾路徑.</returns>
            <remarks>
            若指定路徑不存在則直接傳回空陣列不引發例外. 若指定路徑為作業系統的 System Volume Information 則傳回空陣列(因為若直接存取該資料夾將發生錯誤).
            <br/><br/>
            *.NET 內建 <i>Directory.GetDirectories()</i> 方法若路徑不存在將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDirectory.CreateDirectory(System.String)">
            <summary>
            建立目錄(含所有子目錄).
            </summary>
            <param name="sPath">路徑名稱.</param>
            <remarks>建立目錄(含所有子目錄), 若目錄已存在則忽略不處理(避免建立已存在目錄而引發例外).</remarks>
        </member>
        <member name="T:HIS.Systems.HISPath">
            <summary>
            Path 延伸類別, 提供檔案路徑相關函式, 如 CombinePath(合併路徑) 等.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISPath.GetFileName">
            <summary>
            讀取目前執行程式的檔案名稱, 如 C:\Path\Program1.exe 的 Program1.exe 等.
            </summary>
            <returns>目前執行程式的檔案名稱.</returns>
        </member>
        <member name="M:HIS.Systems.HISPath.GetFileName(System.String)">
            <summary>
            讀取指定檔案的檔案名稱, 如 C:\Path\FileName.dat 的 FileName.dat 等.
            </summary>
            <param name="sPath">檔案名稱, 檔案或含路徑的完整檔案名稱.</param>
            <returns>檔案的檔案名稱.</returns>
        </member>
        <member name="M:HIS.Systems.HISPath.CheckPath(System.String)">
            <summary>
            檢查路徑字串, 若路徑字串未以目錄分隔字元結尾則加上目錄分隔字元, 如 C:\ABC -> C:\ABC\ 等
            </summary>
            <param name="sPath">路徑.</param>
            <returns>以目錄分隔字元結尾的路徑字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISPath.CreatePath(System.String)">
            <summary>
            建立路徑.
            </summary>
            <param name="sPath">路徑, 可包含多個未存在的路徑資料夾.</param>
            <returns>建立路徑的路徑字串(以目錄分隔字元結尾, 如 C:\Path1\ 等).</returns>
            <remarks>
            若路徑不存在則建立路徑, 若已存在則不建立.
            <br/><br/>
            *.NET 中重覆建立路徑將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISFile.Delete(System.String)">
            <summary>
            刪除檔案.
            </summary>
            <param name="sFileName">檔案名稱.</param>
            <returns>若為 true 表示刪除檔案, 否則為 false.</returns>
            <remarks>
            若檔案不存在則忽略.
            <br/><br/>
            *System.IO.File.Delete() 刪除不存在檔案將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISFile.Delete(System.String,System.Boolean)">
            <summary>
            刪除檔案.
            </summary>
            <param name="sFileName">檔案名稱.</param>
            <param name="bForce">強制刪除, 無論檔案是否唯讀等.</param>
            <returns>若為 true 表示刪除檔案, 否則為 false.</returns>
            <remarks>
            若檔案不存在則忽略.
            <br/><br/>
            *System.IO.File.Delete() 刪除不存在檔案將引發例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISFile.WriteFile(System.String,System.String)">
            <summary>
            寫入文字至檔案.
            </summary>
            <param name="sFileName">檔案名稱.</param>
            <param name="sText">文字內容.</param>
            <remarks>
            若檔案已存在則寫入文字將覆蓋原檔案內容.
            <br/><br/>
            *若檔案路不存在將自動建立.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISFile.WriteFile(System.String,System.Windows.Forms.TextBoxBase)">
            <summary>
            寫入文字元件的文字內容至檔案.
            </summary>
            <param name="sFileName">檔案名稱.</param>
            <param name="AText">文字元件.</param>
            <remarks>
            若檔案已存在則寫入文字將覆蓋原檔案內容.
            <br/><br/>
            因為 TextBoxBase.Text 取得的文字內容換行符號為 #10 非 #13#10 因此可使用此方法.
            <br/><br/>
            *若檔案路不存在將自動建立.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDialog.ProgrammerDlg(System.String)">
            <summary>
            <b>限內部使用.</b>
            </summary>
            <param name="sMessage"></param>
        </member>
        <member name="M:HIS.Systems.HISDialog.ProgrammerDlg(System.String,System.Object[])">
            <summary>
            <b>限內部使用.</b>
            </summary>
            <param name="sMessage"></param>
            <param name="MessageArgs"></param>
        </member>
        <member name="M:HIS.Systems.HISDialog.InformationDlg(System.String)">
            <summary>
            訊息對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <example>
            <code>
            if (Text1.Text == "")
            {
              HISDialog.InformationDlg("請輸入查詢條件.");
              Text1.Focus();
              return;
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.InformationDlg(System.String,System.Object[])">
            <summary>
            訊息對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <example>
            <code>
            if (Text1.Text == "")
            {
              HISDialog.InformationDlg("請輸入{0}.", new object[] {Label1.Text});
              Text1.Focus();
              return;
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.InformationDlg(System.String,System.Int32)">
            <summary>
            訊息對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="iCountDownSeconds">倒數秒數.</param>
            <remarks><b>限內部使用.</b></remarks>
            <example>
            <code>
            if (...)
            {  
              HISDialog.InformationDlg("...", 10);
              return;
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.InformationDlg(System.String,System.Object[],System.Int32)">
            <summary>
            訊息對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <param name="iCountDownSeconds">倒數秒數.</param>
            <remarks><b>限內部使用.</b></remarks>
            <example>
            <code>
            if (...)
            {  
              HISDialog.InformationDlg("...", new object[] {...}, 10);
              return;
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.String)">
            <summary>
            錯誤對話盒.
            </summary>
            <remarks>一般應用於無例外情況的錯誤提示.</remarks>
            <param name="sMessage">訊息文字.</param>
            <example>
            <code>
            if (...)
            {
              HISDialog.ErrorDlg("...");
              return;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.String,System.Object[])">
            <summary>
            錯誤對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <remarks>一般應用於無例外情況的錯誤提示.</remarks>
            <example>
            <code>
            if (...)
            {
              HISDialog.ErrorDlg("...", new object[] {...});
              return;
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.Exception)">
            <summary>
            錯誤對話盒.
            </summary>
            <param name="Ex">例外物件.</param>
            <remarks>若為例外情況下應使用 <i>ErrorDlg(string, Exception), ErrorDlg(string, System.Object[], Exception)</i> 等 overload 方法.</remarks>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.String,System.Exception)">
            <summary>
            錯誤對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="Ex">例外物件.</param>
            <example>
            執行若發生例外, 顯示錯誤訊息 :
            <code>
            try
            {
              ...
            }
            catch (Exception Ex)
            {
              HISDialog.ErrorDlg("...", Ex);
              return;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.String,System.Object[],System.Exception)">
            <summary>
            錯誤對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <param name="Ex">例外物件.</param>
            <example>
            執行若發生例外, 顯示錯誤訊息 :
            <code>
            try
            {
              ...
            }
            catch (Exception Ex)
            {
              HISDialog.ErrorDlg("...", new object[] {...}, Ex);
              return;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.String,System.Exception,System.Int32)">
            <summary>
            錯誤對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="Ex">例外物件.</param>
            <param name="iCountDownSeconds">倒數秒數.</param>
            <remarks><b>限內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISDialog.ErrorDlg(System.String,System.Object[],System.Exception,System.Int32)">
            <summary>
            錯誤對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <param name="Ex">例外物件.</param>
            <param name="iCountDownSeconds">倒數秒數.</param>
            <remarks><b>限內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISDialog.WarningDlg(System.String)">
            <summary>
            警示對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <example>
            <code>
            if (...)
            {
              HISDialog.WarningDlg("...");
              return;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.WarningDlg(System.String,System.Object[])">
            <summary>
            警示對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <example>
            <code>
            if (...)
            {
              HISDialog.WarningDlg("...", new object[] {...});
              return;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.YesNoDlg(System.String,System.Object[])">
            <summary>
            Yes/No 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <returns>
            傳回 DialogResult.Yes 表示使用者按下 Yes 按鈕.<br/><br/>
            傳回 DialogResult.No 表示使用者按下 No 按鈕.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDialog.YesNoDlg(System.String)">
            <summary>
            Yes/No 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <returns>
            傳回 DialogResult.Yes 表示使用者按下 Yes 按鈕.<br/><br/>
            傳回 DialogResult.No 表示使用者按下 No 按鈕.
            </returns>
            <example>
            <code>
            ...
            if (HISDialog.YesNoDlg("是否確定刪除記錄 ?") != DialogResult.Yes)
              return;
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.YesNoDlg(System.String,System.Int32)">
            <summary>
            Yes/No 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="iCountDownSeconds">倒數秒數.</param>
            <returns>    
            傳回 DialogResult.Yes 表示使用者按下 Yes 按鈕.<br/><br/>
            傳回 DialogResult.No 表示使用者按下 No 按鈕.
            </returns>
            <remarks><b>限內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISDialog.YesNoDlg(System.String,System.Object[],System.Int32)">
            <summary>
            Yes/No 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <param name="iCountDownSeconds">倒數秒數.</param>
            <returns>
            傳回 DialogResult.Yes 表示使用者按下 Yes 按鈕.<br/><br/>
            傳回 DialogResult.No 表示使用者按下 No 按鈕.
            </returns>
            <remarks><b>限內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISDialog.OkCancelDlg(System.String,System.Object[])">
            <summary>
            Ok/Cancel 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <returns>
            傳回 DialogResult.OK 表示使用者按下 OK 按鈕.
            <br/><br/>
            傳回 DialogResult.Cancel 表示使用者按下 Cancel 按鈕.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDialog.OkCancelDlg(System.String)">
            <summary>
            Ok/Cancel 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <returns>
            傳回 DialogResult.OK 表示使用者按下 OK 按鈕.<br/>
            傳回 DialogResult.Cancel 表示使用者按下 Cancel 按鈕.
            </returns>
            <example>
            <code>
            if (HISDialog.OkCancelDlg("... ?") != DialogResult.OK)
              return;
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDialog.AbortRetryIgnoreDlg(System.String)">
            <summary>
            Abort/Retry/Ignore 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <returns>
            傳回 DialogResult.Abort 表示使用者按下 Abort 按鈕.<br/><br/>
            傳回 DialogResult.Retry 表示使用者按下 Retry 按鈕.<br/><br/>
            傳回 DialogResult.Ignore 表示使用者按下 Ignore 按鈕.
            </returns> 
            <example>
            <code>
            DialogResult DeleteDialogResult;
            // 
            DeleteDialogResult = <b>HISDialog.AbortRetryIgnoreDlg("刪除發生錯誤 : \r\n{0}", new object[] {sFileName})</b>;
            //
            if (DeleteDialogResult == DialogResult.Abort)
              return;
            if (DeleteDialogResult == DialogResult.Retry)
              DeleteFile(sFileName);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDialog.AbortRetryIgnoreDlg(System.String,System.Object[])">
            <summary>
            Abort/Retry/Ignore 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <returns>
            傳回 DialogResult.Abort 表示使用者按下 Abort 按鈕.<br/><br/>
            傳回 DialogResult.Retry 表示使用者按下 Retry 按鈕.<br/><br/>
            傳回 DialogResult.Ignore 表示使用者按下 Ignore 按鈕.
            </returns> 
            <example>
            <code>
            DialogResult DeleteDialogResult;
            // 
            DeleteDialogResult = <b>HISDialog.AbortRetryIgnoreDlg("刪除發生錯誤.")</b>;
            //
            if (DeleteDialogResult == DialogResult.Abort)
              return;
            if (DeleteDialogResult == DialogResult.Retry)
              DeleteFile(sFileName);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDialog.YesNoCancelDlg(System.String)">
            <summary>
            Yes/No/Cancel 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <returns>
            傳回 DialogResult.Yes 表示使用者按下 Yes 按鈕.
            <br/><br/>
            傳回 DialogResult.No 表示使用者按下 No 按鈕.
            <br/><br/>
            傳回 DialogResult.Cancel 表示使用者按下 Cancel 按鈕.
            </returns>
            <example>
            <code>
            if (<b>HISDialog.YesNoCancelDlg("檔案已修改, 是否儲存 ?")</b> != DialogResult.Yes)
              return;
            SaveFile(sFileName);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.YesNoCancelDlg(System.String,System.Object[])">
            <summary>
            Yes/No/Cancel 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <returns>
            傳回 DialogResult.Yes 表示使用者按下 Yes 按鈕.
            <br/><br/>
            傳回 DialogResult.No 表示使用者按下 No 按鈕.
            <br/><br/>
            傳回 DialogResult.Cancel 表示使用者按下 Cancel 按鈕.
            </returns>
            <example>
            <code>
            DialogResult SaveDialogResult;
            // 
            SaveDialogResult = <b>HISDialog.YesNoCancelDlg("檔案已修改, 是否儲存 ? \r\n{0}", new object[] {sFileName})</b>;
            //
            if (SaveDialogResult != DialogResult.Yes)
              return;
            SaveFile(sFileName);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.RetryCancelDlg(System.String)">
            <summary>
            Retry/Cancel 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <returns>
            傳回 DialogResult.Retry 表示使用者按下 Retry 按鈕.
            <br/><br/>
            傳回 DialogResult.Cancel 表示使用者按下 Cancel 按鈕.
            </returns>
            <example>
            <code>
            if (<b>HISDialog.AbortRetryIgnoreDlg("刪除發生錯誤, 是否重試 ?")</b> != DialogResult.Retry)
              return;
            DeleteFile(sFileName);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDialog.RetryCancelDlg(System.String,System.Object[])">
            <summary>
            Retry/Cancel 對話盒.
            </summary>
            <param name="sMessage">訊息文字.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
            <returns>
            傳回 DialogResult.Retry 表示使用者按下 Retry 按鈕.
            <br/><br/>
            傳回 DialogResult.Cancel 表示使用者按下 Cancel 按鈕.
            </returns>
            <example>
            <code>
            DialogResult DeleteDialogResult;
            // 
            DeleteDialogResult = <b>HISDialog.AbortRetryIgnoreDlg("刪除發生錯誤, 是否重試 ? \r\n{0}", new object[] {sFileName})</b>;
            //
            if (DeleteDialogResult != DialogResult.Retry)
              return;
            DeleteFile(sFileName);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDialog.InputBox(System.String,System.String,System.String@)">
            <summary>
            輸入對話盒.
            </summary>
            <param name="sText">視窗標題, 如資料名稱等.</param>
            <param name="sPrompt">輸入提示文字.</param>
            <param name="sValue">輸入數值, 可傳入指定預設值, 輸入數值以此函式參數傳回.</param>
            <returns>若為 true 表示使用者按下 OK 按鈕, 否則為 false.</returns>
            <remarks>
            顯示數值輸入對話盒, 並透過輸入數值參數傳回輸入的資料數值.
            </remarks>
            <example>
            <code>
            string sTableName = "";
            //
            if (!HISDialog.InputBox("表格名稱", "請輸入表格名稱 :", ref sTableName))
              return;
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.InputBox(System.String,System.String,System.Int32@)">
            <summary>
            輸入對話盒.
            </summary>
            <param name="sText">視窗標題, 如資料名稱等.</param>
            <param name="sPrompt">輸入提示文字.</param>
            <param name="iValue">輸入數值, 可傳入指定預設值, 輸入數值以此函式參數傳回.</param>
            <returns>若為 true 表示使用者按下 OK 按鈕, 否則為 false.</returns>
            <remarks>
            顯示數值輸入對話盒, 並透過輸入數值參數傳回輸入的資料數值.
            </remarks>
            <example>
            <code>
            int iMaxRecords = 0;
            //
            if (!HISDialog.InputBox("查詢筆數", "請輸入查詢筆數 :", ref iMaxRecords))
              return;
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDialog.InputBox(System.String,System.String,System.String@,HIS.Systems.HISFormRequest)">
            <summary>
            輸入對話盒.
            </summary>
            <param name="sText">視窗標題, 如資料名稱等.</param>
            <param name="sPrompt">輸入提示文字.</param>
            <param name="sValue">輸入數值, 可傳入指定預設值, 輸入數值以此函式參數傳回.</param>
            <param name="ARequest">Request 物件, 可包含最大長度等文字輸入參數.</param>
            <remarks>
            顯示數值輸入對話盒, 並透過輸入數值參數傳回輸入的資料數值.
            <br/><br/>
            目前支援參數 :
            <list type="table">
              <listheader>
                <term>參數名稱</term>
                <description>說明</description>
              </listheader>
              <item>
                <term>MaxLength(int)</term>
                <description>輸入最大長度, 預設值為 0 (無限制).</description>
              </item>
              <item>
                <term>TextRequired(bool)</term>
                <description>輸入文字是否允許空白(即清除), 預設值為 true (必須輸入).</description>
              </item>
            </list>
            <br/>
            *若視窗中呼叫 InputBox() 方法需要更多 CheckDataName(檢核資料名稱) 請使用視窗方法版本 - <i>this.InputBox()</i>.
            </remarks>
            <returns>輸入對話盒視窗物件, 可用於判斷對話盒狀態(如 OK 等).</returns>
            <example>
            <code>
            HISInputBoxForm InputBoxForm;
            HISFormRequest InputBoxRequest;
            string sTableName = "";
            //
            InputBoxRequest = new HISFormRequest();
            InputBoxRequest["MaxLength"] = 30;
            InputBoxForm = HISDialog.InputBox("表格名稱", "請輸入表格名稱 :", ref sTableName, InputBoxRequest);
            if (!InputBoxForm.OK)
              return;
            TextBox1.Text = sTableName;
            ...
            </code>
            </example>    
        </member>
        <member name="M:HIS.Systems.HISDialog.InputBox(System.String,System.String,System.Int32@,HIS.Systems.HISFormRequest)">
            <summary>
            輸入對話盒.
            </summary>
            <param name="sText">視窗標題, 如資料名稱等.</param>
            <param name="sPrompt">輸入提示文字.</param>
            <param name="iValue">輸入數值, 可傳入指定預設值, 輸入數值以此函式參數傳回.</param>
            <param name="ARequest">Request 物件, 可包含最大長度等文字輸入參數.</param>
            <remarks>
            顯示數值輸入對話盒, 並透過輸入數值參數傳回輸入的資料數值.
            <br/><br/>
            *若視窗中呼叫 InputBox() 方法需要更多 CheckDataName(檢核資料名稱) 請使用視窗方法版本 - <i>this.InputBox()</i>.
            </remarks>
            <returns>輸入對話盒視窗物件, 可用於判斷對話盒狀態(如 OK 等).</returns>
        </member>
        <member name="F:HIS.Systems.HISErrorDialogForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISErrorDialogForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HIS.Systems.HISErrorDialogForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISDateTimeOptions">
            <summary>
            日期/時間選項.
            </summary>
        </member>
        <member name="F:HIS.Systems.HISDateTimeOptions.None">
            <summary>無.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTimeOptions.ShortTime">
            <summary>時間使用時/分格式.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTimeOptions.DayOfWeek">
            <summary>顯示星期.</summary>
        </member>
        <member name="T:HIS.Systems.HISDateType">
            <summary>
            日期類型.
            </summary>
            <remarks>
            若欄位型態為 DateTime 者不需再自行設定(將忽略日期類型設定並自動使用 DateTime 日期類型).
            </remarks>.
        </member>
        <member name="F:HIS.Systems.HISDateType.Auto">
            <summary>
            自動, 元件將依欄位型態/長度/名稱等條件自動判斷日期/時間種類.
            </summary>
            <remarks>
            欄位型態為字串, 長度為 13, 欄位名稱以 DateTime 結尾者視為 Local 日期格式;
            欄位型態為字串, 長度為 14, 欄位名稱以 DateTime 結尾者視為西元日期格式.
            </remarks>
        </member>
        <member name="F:HIS.Systems.HISDateType.DateTime">
            <summary>DateTime 資料型態, 日期輸入格式將預設使用西元日期格式.</summary>
            <remarks
            ><b>此類型僅內部使用</b>, 若欄位型態為 DateTime 則日期輸入格式將預設使用西元日期格式, 
            若輸入時需使用如 Local 等日期格式則應自行明確指定日期類型, 相關元件內部將自動轉換為 
            DateTime 資料型態數值.
            </remarks>
        </member>
        <member name="F:HIS.Systems.HISDateType.AD">
            <summary>使用西元日期格式.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateType.Local">
            <summary>使用 Local 日期格式.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTimeFormat.None">
            <summary>非日期及日期/時間欄位.</summary>
            <remarks>用於忽略日期及日期/時間欄位的自動判斷, 欄位將視為一般文字欄位.</remarks>
        </member>
        <member name="F:HIS.Systems.HISDateTimeFormat.Date">
            <summary>輸入日期, 而時間部份不顯示(使用預設時間, 目前時間等).</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTimeFormat.DateShortTime">
            <summary>輸入日期/時間, 時間輸入格式為時分.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTimeFormat.DateTime">
            <summary>輸入日期/時間, 時間輸入格式為時分秒.</summary>
        </member>
        <member name="T:HIS.Systems.HISDateTime">
            <summary>
            HIS 日期/時間處理函式
            </summary>
        </member>
        <member name="F:HIS.Systems.HISDateTime.DAYOFWEEK_Word">
            <summary>星期格式化, 星期名稱, 如 Sun, Mon, Tue, ..., Sat 等.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTime.DAYOFWEEK_Full">
            <summary>星期格式化, 星期名稱, 如星期日, 星期一, ..., 星期六等.</summary>
        </member>
        <member name="F:HIS.Systems.HISDateTime.DATETIME_ShortTime">
            <summary>時間使用時分格式.</summary>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Year">
            <summary>
            讀取目前西元年份.
            </summary>
            <returns>目前西元年份.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Year(System.Boolean)">
            <summary>
            讀取年份.
            </summary>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 年份(如 98 等), 否則傳回西元年份(如 2009 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Year(System.Int32,System.Boolean)">
            <summary>
            讀取年份.
            </summary>
            <param name="iYear">西元年.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 年份(如 98 等), 否則傳回原值.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Year(System.String)">
            <summary>
            讀取日期的年份.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期的年份, 如 0980610 的 98, 20090610 的 2009.</returns>
            <exception cref="T:System.Exception">若日期或日期/時間格式不正確將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Year(System.String,System.Boolean)">
            <summary>
            民國/西元年轉換.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>民國年或西元年(依參數而定).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Year(System.String,System.Boolean,System.Boolean)">
            <summary>
            民國/西元年轉換.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <param name="bBeforeROC"><i>sDateTime</i> 是否為民國前日期(僅 Local 日期使用).</param>
            <returns>民國年或西元年(依參數而定).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Month">
            <summary>
            讀取目前月份.
            </summary>
            <returns>目前月份.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Month(System.String)">
            <summary>
            讀取日期月份.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期的月份, 如 0980610 的 6, 20090610 的 6 等.</returns>
            <exception cref="T:System.Exception">若日期或日期/時間格式不正確將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Day">
            <summary>
            讀取目前天數.
            </summary>
            <returns>目前天數.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Day(System.String)">
            <summary>
            讀取日期的天數.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期的天數, 如 0980610 的 10, 20090610 的 10.</returns>
            <exception cref="T:System.Exception">若日期或日期/時間格式不正確將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysInMonth">
            <summary>
            讀取目前年月的總天數.
            </summary>
            <returns>目前年月的總天數, 如 200901 有 31 天等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            讀取年月的總天數.
            </summary>
            <param name="iYear">西元年份.</param>
            <param name="iMonth">月份.</param>
            <returns>年月的總天數.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysInMonth(System.Int32,System.Int32,System.Boolean)">
            <summary>
            讀取年月的總天數.
            </summary>
            <param name="iYear">年份, 支援 Local 及西元格式.</param>
            <param name="iMonth">月份.</param>
            <param name="bLocalYear">傳入值是否為 Local 年份.</param>
            <returns>年月的總天數, 年份(依參數而定).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysInMonth(System.String,System.String)">
            <summary>
            讀取年月的天數.
            </summary>
            <param name="sYear">年份, 支援 Local 及西元格式.</param>
            <param name="sMonth">月份.</param>
            <returns>年月的天數.</returns>
            <exception cref="T:System.Exception">若年月格式不正確將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysInMonth(System.String)">
            <summary>
            讀取日期的年月的天數.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期的年月的天數.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Hour12">
            <summary>
            讀取目前日期/時間的小時(12 小時制).
            </summary>
            <returns>目前日期/時間的小時(12 小時制).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Hour12(System.DateTime)">
            <summary>
            讀取日期/時間的小時(12 小時制).
            </summary>
            <param name="Value">日期/時間.</param>
            <returns>日期/時間的小時(12 小時制).</returns>
            <example>
            <code>
            DateTime Value = "172059";
            ...
            Result = HISDateTime.Hour12(Value);  &lt;- 結果為 5 (17)
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDateTime.Hour">
            <summary>
            讀取目前日期/時間的小時(24 小時制).
            </summary>
            <returns>目前日期/時間的小時(24 小時制).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Hour(System.String)">
            <summary>
            讀取時間或日期/時間的小時(24 小時制).
            </summary>
            <param name="sDateTime">來源數值, 時間或日期/時間, 支援 Local 及西元格式.</param>
            <returns>時間或日期/時間的小時(24 小時制).</returns>
            <exception cref="T:System.Exception">若來源數值為不合法的時間或日期/時間(如空白等)將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Hour(System.String,System.Int32)">
            <summary>
            讀取時間或日期/時間的小時(24 小時制).
            </summary>
            <param name="sDateTime">來源數值, 時間或日期/時間, 支援 Local 及西元格式.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>時間或日期/時間的小時(24 小時制), 若來源數值無時間則傳回替代數值.</returns>
            <exception cref="T:System.Exception">若來源數值為不合法的時間或日期/時間(如空白等)將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Minute">
            <summary>
            讀取目前日期/時間的分鐘.
            </summary>
            <returns>目前日期/時間的分鐘.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Minute(System.String)">
            <summary>
            讀取時間或日期/時間的分鐘.
            </summary>
            <param name="sDateTime">來源數值, 可為時間或日期/時間, 支援 Local 及西元格式.</param>
            <returns>時間或日期/時間的分鐘.</returns>
            <exception cref="T:System.Exception">若來源數值為不合法的時間或日期/時間(如空白等)將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Minute(System.String,System.Int32)">
            <summary>
            讀取時間或日期/時間的分鐘.
            </summary>
            <param name="sDateTime">來源數值, 可為時間或日期/時間, 支援 Local 及西元格式.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>時間或日期/時間的分鐘, 若來源數值無時間則傳回替代數值.</returns>
            <exception cref="T:System.Exception">若來源數值為不合法的時間或日期/時間(如空白等)將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Second">
            <summary>
            讀取目前日期/時間的秒數.
            </summary>
            <returns>目前日期/時間的秒數.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Second(System.String)">
            <summary>
            讀取時間或日期/時間的秒數.
            </summary>
            <param name="sDateTime">來源數值, 可為時間或日期/時間, 支援 Local 及西元格式.</param>
            <returns>時間或日期/時間的秒數.</returns>
            <exception cref="T:System.Exception">若來源數值為不合法的時間或日期/時間(如空白等)將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.Second(System.String,System.Int32)">
            <summary>
            讀取時間或日期/時間的秒數.
            </summary>
            <param name="sDateTime">來源數值, 可為時間或日期/時間, 支援 Local 及西元格式.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>時間或日期/時間的秒數, 若來源數值無時間則傳回替代數值.</returns>
            <exception cref="T:System.Exception">若來源數值為不合法的時間或日期/時間(如空白等)將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YearString">
            <summary>
            讀取目前西元年份.
            </summary>
            <returns>目前西元年份, 如 2009 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YearString(System.Boolean)">
            <summary>
            讀取目前年份.
            </summary>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 年份(如 098 等), 否則傳回西元年份(如 2009 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YearString(System.Int32)">
            <summary>
            讀取西元年份.
            </summary>
            <param name="iYear">西元年份.</param>
            <returns>西元年份.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YearString(System.Int32,System.Boolean)">
            <summary>
            讀取年份.
            </summary>
            <param name="iYear">Local 或西元年份.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則表示西元轉 Local 年份(如 2009 的 098 等), 否則表示 Local 傳西元年份(如 98 的 2009 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YearString(System.Object)">
            <summary>
            讀取日期或日期/時間的年份.
            </summary>
            <param name="Value">來源數值, 日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期或日期/時間的年份.</returns>
            <remarks>來源數值可直接傳入 Row[...] 物件型態的資料數值(不需自行轉型).</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YearString(System.String)">
            <summary>
            讀取日期或日期/時間的年份.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期或日期/時間的年份, 如 0980610 -> 098, 20090610 -> 2009 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MonthString">
            <summary>
            讀取目前日期/時間的月份.
            </summary>
            <returns>目前日期/時間的月份, 如 01 ~ 12.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MonthString(System.Object)">
            <summary>
            讀取日期或日期/時間的月份.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>日期或日期/時間的月份, 如 01 ~ 12.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MonthString(System.String)">
            <summary>
            讀取日期或日期/時間的月份.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local, 西元格式.</param>
            <returns>日期或日期/時間的月份, 如 0980610 的 06, 20090610 的 06 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayString">
            <summary>
            讀取目前日期/時間的日數.
            </summary>
            <returns>目前日期/時間的日數, 如 01 ~ 31 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayString(System.Object)">
            <summary>
            讀取日期或日期/時間的日數.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>日期或日期/時間的日數, 如 0980610 的 10, 20090610 的 10 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayString(System.String)">
            <summary>
            讀取日期或日期/時間的日數.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期或日期/時間的日數, 如 0980610 的 10, 20090610 的 10 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.HourString(System.String)">
            <summary>
            讀取日期/時間的時數.
            </summary>
            <param name="sDateTime">日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期/時間的時數, 如 00~23 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MinuteString(System.String)">
            <summary>
            讀取日期/時間的分鐘數.
            </summary>
            <param name="sDateTime">日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期/時間的分鐘數, 如 00~59 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.SecondString(System.String)">
            <summary>
            讀取日期/時間的秒數.
            </summary>
            <param name="sDateTime">日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期/時間的秒數, 如 00~59 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM">
            <summary>
            讀取目前西元年月.
            </summary>
            <returns>目前西元年月.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM(System.Boolean)">
            <summary>
            讀取目前年月.
            </summary>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 年月(如 09806 等), 否則傳回西元年月(如 200906 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM(System.Object)">
            <summary>
            讀取日期或日期/時間的年月.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local 或西元格式及 DateTime 型態.</param>
            <returns>日期或日期/時間的年月, 若來源數值為不合法的日期或日期/時間將傳回原值.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM(System.String)">
            <summary>
            讀取日期或日期/時間的年月.
            </summary>
            <param name="sDateTime">來源數值, 日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期或日期/時間的年月, 若來源數值為不合法的日期或日期/時間將傳回原值.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM(System.String,System.Boolean)">
            <summary>
            讀取日期或日期/時間的年月.
            </summary>
            <param name="sDateTime">來源數值, 日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>日期或日期/時間的年月, 若來源數值為不合法的日期或日期/時間將傳回原值.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM(System.DateTime)">
            <summary>
            讀取日期/時間的西元年月.
            </summary>
            <param name="Value">日期/時間.</param>
            <returns>日期/時間的西元年月.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.YM(System.DateTime,System.Boolean)">
            <summary>
            讀取日期/時間的年月.
            </summary>
            <param name="Value">日期/時間.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 年月(如 09806 等), 否則傳回西元年月(如 200906 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShortYM">
            <summary>
            縮寫年月, 西元年的後 2 碼及月份.
            </summary>
            <returns>縮寫年月, 如 0901(200901) 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString">
            <summary>
            讀取目前日期/時間的西元日期/時間字串.
            </summary>
            <returns>目前日期/時間的西元日期/時間字串, 如 20090610172059.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString(System.Boolean)">
            <summary>
            讀取目前日期/時間的日期/時間字串.
            </summary>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 日期/時間(如 0980610172059 等), 否則傳回西元日期/時間(如 20090610172059 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString(System.Object,System.Boolean)">
            <summary>
            Local/西元日期轉換.
            </summary>
            <param name="Value">來源數值, 必須為日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>    
            若 <i>Value</i> 為 Local 格式且 <i>bLocalize</i> 為 false 則傳回轉換的西元日期/時間.                         <br/>
            若 <i>Value</i> 為西元格式且 <i>bLocalize</i> 為 true 則傳回轉換的 Local 日期/時間.                          <br/>
            若 <i>Value</i> 為 DateTime 型態而 <i>bLocalize</i> 為 true 則傳回 Local 日期/時間, 否則傳回西元日期/時間.  <br/>
            其他情況則傳回原來源數值.
            </returns>
            <remarks>
            若 <i>Value</i> 的數值格式為字串則資料內容需為完整日期/時間格式(Local 或西元), 否則將傳回原日期/時間來源數值.
            <br/><br/>
            Local 日期/時間, 如 0960610172059 等. <br/>
            西元日期/時間, 如 20070610172059 等.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString(System.Object)">
            <summary>
            讀取日期/時間的日期/時間字串.
            </summary>
            <param name="Value">日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>日期/時間的日期/時間字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString(System.DateTime)">
            <summary>
            讀取日期/時間的西元日期/時間字串.
            </summary>
            <param name="Value">日期/時間.</param>
            <returns>日期/時間的<b>西元</b>日期/時間字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString(System.DateTime,System.Boolean)">
            <summary>
            讀取日期/時間的日期/時間字串.
            </summary>
            <param name="Value">日期/時間.</param>
            <param name="bLocalize">是否轉換為 Local 格式.</param>
            <returns>日期/時間的日期/時間字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeString(System.DateTime,System.Boolean@)">
            <summary>
            讀取 Local 日期/時間.
            </summary>
            <param name="Value">日期/時間.</param>
            <param name="bBeforeROC">是否為民國前, 若傳回 true 表示 <i>Value</i> 為民國前的日期/時間, 否則為 false.</param>
            <returns>DateTime 數值的 Local 日期/時間, 若結果為民國前日期則 <i>bBeforeROC</i> 為 true, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DefaultDateTimeString">
            <summary>
            預設日期/時間, 秒數為 00.
            </summary>
            <returns>目前的日期/時間(西元), 秒數為 00, 如 20090610172000.</returns>
            <remarks>一般應用於以程式(非人為)填入時間時使用(秒數一致).</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DefaultDateTimeString(System.Boolean)">
            <summary>
            預設日期/時間.
            </summary>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>目前的日期/時間(Local 或西元), 秒數為 00, 如 0980610172000, 20090610172000 等.</returns>
            <remarks>一般應用於以程式(非人為)填入時間時使用(秒數一致).</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CombineDateTime(System.String,System.String)">
            <summary>
            合併日期, 時間.
            </summary>
            <param name="sDate">日期.</param>
            <param name="sTime">時間.</param>
            <returns>合併後的日期/時間, 若時間空白預設使用 000000, 時間不足 6 碼補足尾碼, 如 0980610 + 1720 -> 0980610172000, 20090610 + 1720 -> 20090610172000.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsFullDateTime(System.String)">
            <summary>
            是否為完整日期/時間格式的數值.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>若為 true 表示 <i>sDate</i> 數值為完整日期/時間格式(如 0960101172059, 20070101172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsDate(System.String)">
            <summary>
            是否為西元格式的日期數值.
            </summary>
            <param name="sDate">日期.</param>
            <returns>若為 true 表示 <i>sDate</i> 數值為西元格式的日期(如 20070101 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsDateTime(System.String)">
            <summary>
            是否為西元格式的日期或日期/時間數值.
            </summary>
            <param name="sDateTime">日期/時間, 可為日期或日期/時間.</param>
            <returns>若為 true 表示 <i>sDateTime</i> 數值為西元格式的日期或日期/時間(如 20070101, 20070101172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsDateTimeOnly(System.String)">
            <summary>
            是否為西元格式的日期/時間數值.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>若為 true 表示 <i>sDateTime</i> 數值為西元格式的日期/時間(如 20070101172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsLocalDate(System.String)">
            <summary>
            是否為 Local 格式的日期.
            </summary>
            <param name="sDate">日期.</param>
            <returns>若為 true 表示 <i>sDate</i> 數值為 Local 格式的日期(如 0960101 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsLocalDateTime(System.String)">
            <summary>
            是否為 Local 格式的日期或日期/時間數值.
            </summary>
            <param name="sDateTime">日期/時間, 可為日期或日期/時間.</param>
            <returns>若為 true 表示 <i>sDateTime</i> 數值為 Local 格式的日期或日期/時間(如 0960101, 0960101172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsLocalDateTimeOnly(System.String)">
            <summary>
            是否為 Local 格式的日期/時間數值.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>若為 true 表示 <i>sDateTime</i> 數值為 Local 格式的日期/時間(如 0960101172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsTime(System.String)">
            <summary>
            時間是否為時分或時分秒格式的時間數值.
            </summary>
            <param name="sTime">時間.</param>
            <returns>若為 true 表示 <i>sTime</i> 數值為時間格式(時分或時分秒)數值(如 1720, 172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsTimeOnly(System.String)">
            <summary>
            時間是否為時分秒格式的時間數值.
            </summary>
            <param name="sTime">時間.</param>
            <returns>若為 true 表示 <i>sTime</i> 數值為時間格式(時分秒)(如 172059 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.IsShortTime(System.String)">
            <summary>
            是否為時間(時分)格式的時間數值.
            </summary>
            <param name="sShortTime">時間.</param>
            <returns>若為 true 表示 <i>sTime</i> 數值為時間(時分)格式(如 1720 等), 否則為 false.</returns>
            <remarks>
            此方法僅為檢核日期/時間的基本格式(長度等), 非必要請勿使用.
            <br/><br/>
            日期/時間的合法性檢核應使用 <i>HISDateTime.CheckDate()</i> 等方法.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString">
            <summary>
            讀取目前西元日期.
            </summary>
            <returns>目前西元日期.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.Object)">
            <summary>
            讀取日期或日期/時間的日期.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>日期或日期/時間的日期.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.DateTime)">
            <summary>
            讀取日期/時間的西元日期.
            </summary>
            <param name="Value">日期/時間.</param>
            <returns>日期/時間的西元日期.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.String)">
            <summary>
            讀取日期或日期/時間的日期.
            </summary>
            <param name="sDateTime">來源數值, 日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期或日期/時間的日期.</returns>
            <remarks>
            Local 日期, 如 0960610 等.
            <br/>
            西元日期, 如 20070610 等.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.Boolean)">
            <summary>
            讀取目前日期/時間的日期.
            </summary>
            <param name="bLocalize">是否轉換為 Local 格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 日期(如 0980610 等), 否則傳回西元日期(如 20090610 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.Object,System.Boolean)">
            <summary>
            Local/西元日期轉換.
            </summary>
            <param name="Value">來源數值, 日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>
            若 <i>Value</i> 為 Local 格式且 <i>bLocalize</i> 為 false 則傳回西元日期. <br/>
            若 <i>Value</i> 為西元格式且 <i>bLocalize</i> 為 true 則傳回 Local 日期.  <br/>
            若 <i>Value</i> 為 DateTime 型態而 <i>bLocalize</i> 為 true 則傳回 Local 日期, 否則傳回西元日期.
            其他情況則傳回原來源數值.
            </returns>
            <remarks>
            Local 日期, 如 0960610 等.
            <br/>
            西元日期, 如 20070610 等.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.Object,System.Boolean,System.Boolean)">
            <summary>
            讀取日期.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <param name="bBeforeROC">是否轉換為民國前.</param>
            <returns>.</returns>
            <remarks>
            若 <i>bLocalize</i> 為 false 且 <i>bBeforeROC</i> 為 true 表示民國前日期轉換為西元日期, 因此 <i>Value</i> 必須為 Local 的日期或日期/時間.
            其他轉換規則使用 DateString(string, bool).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.DateTime,System.Boolean)">
            <summary>
            Local/西元日期轉換.
            </summary>
            <param name="Value">日期/時間來源數值.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>若 <i>bLocalize</i> 為 true 則傳回 Local 日期, 否則傳回西元日期.</returns>
            <remarks>
            Local 日期, 如 0960610 等. <br/>
            西元日期, 如 20070610 等.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateString(System.String,System.Boolean)">
            <summary>
            Local/西元日期轉換.
            </summary>
            <param name="sDateTime">來源數值, 日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="bLocalize">是否轉換為 Local 日期格式.</param>
            <returns>
            若 <i>sDateTime</i> 為 Local 格式且 <i>bLocalize</i> 為 false 則傳回西元日期. <br/>
            若 <i>sDateTime</i> 為西元格式且 <i>bLocalize</i> 為 true 則傳回 Local 日期.  <br/>
            其他情況則傳回原來源數值.
            </returns>
            <remarks>
            Local 日期, 如 0960610 等.
            <br/>
            西元日期, 如 20070610 等.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.TimeString">
            <summary>
            讀取目前時間(時分秒).
            </summary>
            <returns>目前時間(時分秒, 24 小時制), 如 230520 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.TimeString(System.Object)">
            <summary>
            讀取日期/時間或時間的時間(時分秒).
            </summary>
            <param name="Value">來源數值, 日期/時間或時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>日期/時間或時間的時間(時分秒, 24 小時制), 如 230520 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.TimeString(System.DateTime)">
            <summary>
            讀取時間(時分秒).
            </summary>
            <param name="Value">來源數值.</param>
            <returns>時間(時分秒, 24 小時制), 如 230520 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.TimeString(System.String)">
            <summary>
            讀取時間(時分秒).
            </summary>
            <param name="sDateTime">來源數值, <b>必須為日期/時間</b>, 支援 Local 及西元格式.</param>
            <returns>
            時間(時分秒, 24 小時制), 如 230520 等. 若來源數值為 Local 或西元格式則傳回時間, 否則傳回原值.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShortTimeString">
            <summary>
            讀取目前時間(時分).
            </summary>
            <returns>目前時間(時分, 24 小時制), 如 2359 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShortTimeString(System.String)">
            <summary>
            讀取時間(時分).
            </summary>
            <param name="sDateTime">來源日期/時間數值, 可為日期/時間或時間, 支援 Local 及西元格式.</param>
            <returns>目前時間(時分, 24 小時制), 如 2359 等.</returns>
            <example>
            <code>如 172059 -> 1720, 0980610172059 -> 1720 .
            string Result, sDateTime = "0980530172015";
            
            Result = HISDateTime.ShortTimeString(sDateTime);  &lt;- 結果為 1720
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShortTimeString(System.DateTime)">
            <summary>
            時間(時分秒)格式
            </summary>
            <param name="Value">日期時間(DateTime).</param>
            <returns>傳回 24 小時制之時分秒, 如 2352 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.PanelDateTime">
            <summary>
            狀態列顯示日期/時間.
            </summary>
            <returns>狀態列顯示日期/時間, 如 098/08/11 下午 11:52:19 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportDateTime">
            <summary>
            報表日期時間格式
            </summary>
            <returns>傳回報表日期時間, 如 098/08/11 23:52:19.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportDateTime(System.String)">
            <summary>
            報表日期時間格式
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>傳回報表日期時間(指定日期), 如 098/08/11 23:52:19 等.</returns>
            <example>
            <code>
            string Result, sDateTime = "0980610235219";
            
            Result = HISDateTime.ReportDateTime(sDateTime);  &lt;- 結果為 098/08/11 23:52:19
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportDateTime(System.String,System.Boolean)">
            <summary>
            報表列印格式的日期/時間. 
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <param name="bShortTime">是否時間使用時/分格式.</param>
            <returns>報表列印格式的日期/時間, 如 098/08/11 23:52, 098/08/11 23:52:19 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportDate">
            <summary>
            報表列印格式的日期. 
            </summary>
            <returns>報表列印格式的日期, 如 098/08/11 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportDate(System.String)">
            <summary>
             報表日期格式
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>傳回報表日期, 如 098/08/11 .</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportTime(System.String)">
            <summary>
            報表列印時間.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>傳回報表列印格式時間, 如 12:00:00 .</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ReportTime(System.String,System.Boolean)">
            <summary>
            報表列印時間.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <param name="bShortTime">簡短日期否.</param>
            <returns>傳回報表列印格式時間, 如 12:00:00, 12:00 等 .</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDate">
            <summary>
            目前顯示日期.
            </summary>
            <returns>目前顯示日期, 如 098/08/11.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDate(System.String)">
            <summary>
            顯示日期.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>顯示日期, 如 098/08/11.</returns>
            <example>
            <code>
            string Result, sDateTime = "0980610235219";
            
            Result = HISDateTime.DisplayDate(sDateTime);  &lt;- 結果為 098/08/11 
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayTime">
            <summary>
            目前顯示時間.
            </summary>
            <returns>目前顯示時間, 如 12:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayTime(System.String)">
            <summary>
            顯示時間.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <returns>顯示時間, 如 12:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayTime(System.String,System.Boolean)">
            <summary>
            顯示時間.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <param name="bShortTime">是否時間使用時/分格式.</param>
            <returns>顯示時間, 如 12:00:00, 12:00 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDateTime">
            <summary>
            Local 目前顯示日期/時間.
            </summary>
            <returns>Local 目前顯示日期/時間, 如 098/08/11 12:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDateTime(System.String)">
            <summary>
            顯示日期時間格式
            </summary>
            <param name="sDateTime">日期/時間, 支援 Local 及西元格式.</param>
            <returns>傳回顯示日期時間, 如 098/08/11 12:00:00 .</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDateTime(System.String,System.Boolean)">
            <summary>
            顯示日期/時間.
            </summary>
            <param name="sDateTime">日期/時間, 支援 Local 及西元格式.</param>
            <param name="bShortTime">是否時間使用時/分格式.</param>
            <returns>顯示日期/時間.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDateTime(System.String,HIS.Systems.HISDateTimeOptions)">
            <summary>
            顯示日期/時間.
            </summary>
            <param name="sDateTime">日期/時間.</param>
            <param name="DateTimeOptions">顯示日期/時間選項</param>
            <returns>顯示日期/時間, 如 098/08/11 12:00, 098/08/11 12:00:00 等.</returns>
            <remarks>若日期/時間數值不合法則直接傳回原值.</remarks>
            <example>
            <code>
            string Result, sDateTime = "0980610235219";
            
            Result = HISDateTime.DisplayDateTime(sDateTime,HISDateTimeOptions.ShortTime); &lt;- 結果為 098/08/11 23:52
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDateTime(System.DateTime)">
            <summary>
            顯示日期時間.
            </summary>
            <param name="Value">日期時間(DateTime).</param>
            <returns>傳回顯示日期時間, 如 098/08/11 12:00, 098/08/11 12:00:00 .</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DisplayDateTime(System.DateTime,HIS.Systems.HISDateTimeOptions)">
            <summary>
            顯示日期時間.
            </summary>
            <param name="Value">日期時間(DateTime).</param>
            <param name="DateTimeOptions">HIS 日期時間選項</param>
            <returns>傳回顯示日期時間, 如 098/08/11 12:00, 098/08/11 12:00:00 .</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ToDateTime(System.Object)">
            <summary>
            日期/時間轉換.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>日期/時間, 若無時間則預設時間為 00:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ToDateTime(System.Object,System.Boolean)">
            <summary>
            日期/時間轉換.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <param name="bBeforeROC"><i>Value</i> 是否為民國前日期, 僅應用於 Local 日期.</param>
            <returns>日期/時間, 若無時間則預設時間為 00:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ToDateTime(System.String)">
            <summary>
            日期/時間轉換.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>日期/時間, 若無時間則預設時間為 00:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DateTimeValue(System.String)">
            <summary>
            日期/時間轉換.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>
            日期/時間(DateTime 型態), 若 <i>sDateTime</i> 為空值則傳回 DBNull.Value (DateTime 型態欄位的 NULL 數值使用 DBNull.Value).
            <br/><br/>
            若無時間則預設時間為 00:00:00.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ToDateTime(System.String,System.Boolean)">
            <summary>
            日期/時間轉換.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="bBeforeROC"><i>sDateTime</i> 是否為民國前日期, 僅應用於 Local 日期.</param>
            <returns>日期/時間, 若無時間則預設時間為 00:00:00.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckDate(System.String)">
            <summary>
            檢查日期.
            </summary>
            <param name="sDate">日期, 支援 Local 或西元.</param>
            <returns>若為 true 表示日期正確, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckDate(System.String,HIS.Systems.HISDateType)">
            <summary>
            檢查日期.
            </summary>
            <param name="sDate">日期, 支援 Local 或西元.</param>
            <param name="ADateType">日期類型.</param>
            <returns>若為 true 表示日期正確, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckDate(System.String,System.Boolean)">
            <summary>
            檢查日期.
            </summary>
            <param name="sDate">日期, 支援 Local 或西元.</param>
            <param name="bBeforeROC"><i>sDate</i> 是否為民國前日期, 僅應用於 Local 日期檢查.</param>
            <returns>若為 true 表示日期正確, 否則為 false.</returns>
            <remarks>
            Local 日期, 如 0960610 等. <br/>
            西元日期, 如 20070610 等.
            </remarks>
            <example>
            <code>
            string sDate = "0980610";
            ...
            Result = HISDateTime.CheckDate(sDate); &lt;- 結果為 true
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckDateTime(System.String)">
            <summary>
            檢查日期/時間.
            </summary>
            <param name="sDateTime">日期/時間, 支援 Local 或西元.</param>
            <returns>若為 true 表示日期/時間正確, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckLocalYM(System.String)">
            <summary>
            年月檢查
            </summary>
            <param name="sYM">年月.</param>
            <returns>傳回年月是否正確.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckYM(System.String)">
            <summary>
            檢查年月.
            </summary>
            <param name="sYM">西元年月.</param>
            <returns>若為傳回 true 表示年月合法, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckTime(System.String)">
            <summary>
            檢查時間.
            </summary>
            <param name="sTime">時間(時分秒).</param>
            <returns>若為 true 表示時間數值合法, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.CheckShortTime(System.String)">
            <summary>
            檢查時間.
            </summary>
            <param name="sShortTime">時間(時分).</param>
            <returns>若為 true 表示時間數值合法, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftMonths(System.Int32)">
            <summary>
            目前日期加/減月數.
            </summary>
            <param name="iMonths">月數, 若為正值表示日期加 <i>iMonths</i> 個月, 若為負值表示日期減 <i>iMonths</i> 個月.</param>
            <returns>目前日期加/減月數後的<b>西元</b>日期(如 20070610 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftMonths(System.String,System.Int32)">
            <summary>
            日期或日期/時間加/減月數.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="iMonths">月數, 若為正值表示日期加 <i>iMonths</i> 個月, 若為負值表示日期減 <i>iMonths</i> 個月.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iMonths</i> 個月數後的 Local 日期(如 0960610, 0960610172059 等)或西元日期(如 20070610, 20070610172059 等).
            傳回數值格式視傳入日期/時間格式而定.
            </returns>
            <example>
            <code>
            string Result, sDateTime = "0980610235219";
            
            Result = HISDateTime.ShiftMonths(sDateTime,2); &lt;- 結果為 0981011
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftDays(System.Int32)">
            <summary>
            目前日期加/減天數.
            </summary>
            <param name="iDays">天數, 若為正值表示日期加 <i>iDays</i> 天, 若為負值表示日期減 <i>iDays</i> 天.</param>
            <returns>目前日期加/減天數後的<b>西元</b>日期(如 20070610 等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftDays(System.String,System.Int32)">
            <summary>
            日期或日期/時間加/減天數.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="iDays">天數, 若為正值表示日期加 <i>iDays</i> 天, 若為負值表示日期減 <i>iDays</i> 天.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iDays</i> 天後的 Local 日期(如 0960610, 0960610172059 等)或西元日期(如 20070610, 20070610172059 等).
            傳回值格式視傳入數值格式而定.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftHours(System.Int32)">
            <summary>
            目前日期/時間加/減時數.
            </summary>
            <param name="iHours">時數, 若為正值表示時間加 <i>iHours</i> 個小時, 若為負值表示時間減 <i>iHours</i> 個小時.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iHours</i> 個小時後的<b>西元</b>日期/時間(如 20070610172059 等).
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftHours(System.String,System.Int32)">
            <summary>
            日期/時間加/減時數.
            </summary>
            <param name="sDateTime">日期, 時間或日期/時間, 支援 Local 及西元格式.</param>
            <param name="iHours">時數, 若為正值表示時間加 <i>iHours</i> 個小時, 若為負值表示時間減 <i>iHours</i> 個小時.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iHours</i> 個小時後的時間或 Local 日期/時間(如 0960610172059 等)或西元日期/時間(如 20070610172059 等).
            傳回日期格式視傳入日期格式而定.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftMinutes(System.Int32)">
            <summary>
            目前日期/時間加/減分鐘.
            </summary>
            <param name="iMinutes">分鐘, 若為正值表示時間加 <i>iMinutes</i> 分鐘, 若為負值表示時間減 <i>iMinutes</i> 分鐘.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iMinutes</i> 分鐘後的<b>西元</b>日期/時間(如 20070610172059 等).
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftMinutes(System.String,System.Int32)">
            <summary>
            日期/時間加/減分鐘.
            </summary>
            <param name="sDateTime">時間或日期/時間, 日期/時間支援 Local 及西元格式.</param>
            <param name="iMinutes">時數, 若為正值表示時間加 <i>iMinutes</i> 分鐘, 若為負值表示時間減 <i>iMinutes</i> 分鐘.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iMinutes</i> 分鐘後的時間或 Local 日期/時間(如 0960610172059 等)或西元日期/時間(如 20070610172059 等).
            傳回日期格式視傳入日期格式而定.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftSeconds(System.Int32)">
            <summary>
            目前日期/時間加/減秒數.
            </summary>
            <param name="iSeconds">秒數, 若為正值表示時間加 <i>iSeconds</i> 秒, 若為負值表示時間減 <i>iSeconds</i> 秒.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iSeconds</i> 秒後的<b>西元</b>日期/時間(如 20080610172059 等).
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.ShiftSeconds(System.String,System.Int32)">
            <summary>
            日期/時間加/減秒數.
            </summary>
            <param name="sDateTime">時間或日期/時間, 日期/時間支援 Local 及西元格式.</param>
            <param name="iSeconds">秒數, 若為正值表示時間加 <i>iSeconds</i> 秒, 若為負值表示時間減 <i>iSeconds</i> 秒.</param>
            <returns>
            <i>sDateTime</i> 數值加 <i>iSeconds</i> 秒後的時間或 Local 日期/時間(如 0960610172059 等)或西元日期/時間(如 20070610172059 等).
            傳回日期格式視傳入日期格式而定.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MonthsDiff(System.String)">
            <summary>
            讀取差異月數.
            </summary>
            <param name="sBeginDateTime">開始日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>開始與目前的日期或日期/時間之間的差異月數(開始日期當天計入).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MonthsDiff(System.String,System.String)">
            <summary>
            讀取差異月數.
            </summary>
            <param name="sBeginDateTime">開始日期或日期/時間.</param>
            <param name="sEndDateTime">結束日期或日期/時間.</param>
            <returns>開始與結束的日期或日期/時間之間的差異月數(開始日期當天計入).</returns>
            <remarks>日期或日期/時間, 支援 Local 及西元格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MonthsDiff(System.String,System.String,System.Int32)">
            <summary>
            讀取差異月數.
            </summary>
            <param name="sBeginDateTime">開始日期或日期/時間.</param>
            <param name="sEndDateTime">結束日期或日期/時間.</param>
            <param name="iDecimal">小數點位數, 採無條件捨去.</param>
            <returns>開始與結束的日期或日期/時間之間的差異月數(開始日期當天計入).</returns>
            <remarks>日期或日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysDiff(System.String)">
            <summary>
            讀取差異日數.
            </summary>
            <param name="sBeginDateTime">開始日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>開始與目前的日期或日期/時間之間的差異日數(不包含當日).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysDiff(System.String,System.String)">
            <summary>
            讀取差異日數.
            </summary>
            <param name="sBeginDateTime">開始日期或日期/時間.</param>
            <param name="sEndDateTime">結束日期或日期/時間.</param>
            <returns>開始與結束的日期或日期/時間之間的差異日數(不包含當日).</returns>
            <remarks>日期或日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DaysDiff(System.String,System.String,System.Boolean)">
            <summary>
            讀取差異日數.
            </summary>
            <param name="sBeginDateTime">開始日期或日期/時間.</param>
            <param name="sEndDateTime">結束日期或日期/時間.</param>
            <param name="bToday">是否包含當日.</param>
            <returns>開始與結束的日期或日期/時間之間的差異日數(依是否包含當日).</returns>
            <remarks>日期或日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.HoursDiff(System.String)">
            <summary>
            讀取差異時數.
            </summary>
            <param name="sBeginDateTime">開始日期/時間, 支援 Local 及西元格式.</param>
            <returns>開始與目前的日期/時間之間的差異時數.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.HoursDiff(System.String,System.String)">
            <summary>
            讀取差異時數.
            </summary>
            <param name="sBeginDateTime">開始日期/時間.</param>
            <param name="sEndDateTime">結束日期/時間.</param>
            <returns>開始與結束的日期/時間之間的差異時數.</returns>
            <remarks>日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MinutesDiff(System.String)">
            <summary>
            讀取差異分鐘數.
            </summary>
            <param name="sBeginDateTime">開始日期/時間, 支援 Local 及西元格式.</param>
            <returns>開始與目前的日期/時間之間的差異分鐘數.</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.MinutesDiff(System.String,System.String)">
            <summary>
            讀取差異分鐘數.
            </summary>
            <param name="sBeginDateTime">開始日期/時間.</param>
            <param name="sEndDateTime">結束日期/時間.</param>
            <returns>開始與結束的日期/時間之間的差異分鐘數.</returns>
            <remarks>日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.SecondsDiff(System.String)">
            <summary>
            讀取差異秒數.
            </summary>
            <param name="sBeginDateTime">開始日期/時間.</param>
            <returns>開始與目前的日期/時間之間的差異秒數.</returns>
            <remarks>日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.SecondsDiff(System.String,System.String)">
            <summary>
            讀取差異秒數.
            </summary>
            <param name="sBeginDateTime">開始日期/時間.</param>
            <param name="sEndDateTime">結束日期/時間.</param>
            <returns>開始與結束的日期/時間之間的差異秒數.</returns>
            <remarks>日期/時間, 支援 Local 及西元格式</remarks>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayOfWeek">
            <summary>
            讀取日期的星期.
            </summary>
            <returns>
            今日日期的星期代號(0.星期日, 1.星期一, ..., 6.星期六).
            <br/><br/>
            *星期常數, 參考使用如 DAYOFWEEK_Sunday(星期日) 等.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayOfWeek(System.Object)">
            <summary>
            讀取日期的星期.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <returns>
            日期的星期代號(0.星期日, 1.星期一, ..., 6.星期六).
            <br/><br/>
            *星期常數, 參考使用如 DAYOFWEEK_Sunday(星期日) 等.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayOfWeek(System.String)">
            <summary>
            讀取日期的星期.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <returns>
            日期的星期代號(星期日, 星期一, ... 星期六).
            <br/><br/>
            *星期常數, 如星期日(HISConst.DAYOFWEEK_Sunday) 等.
            </returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayOfWeek(System.Object,System.String)">
            <summary>
            讀取日期的星期.
            </summary>
            <param name="Value">日期或日期/時間, 支援 Local, 西元格式及 DateTime 型態.</param>
            <param name="sFormat">星期數值格式化字串, 參考 DateTime structure - "Custom Date and Time Format Strings".</param>
            <returns>日期的星期名稱(如星期一等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayOfWeek(System.String,System.String)">
            <summary>
            讀取日期的星期.
            </summary>
            <param name="sDateTime">日期或日期/時間, 支援 Local 及西元格式.</param>
            <param name="sFormat">星期數值格式化字串, 參考 DateTime structure - "Custom Date and Time Format Strings".</param>
            <returns>日期的星期名稱(如星期一等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.DayOfWeek(System.DateTime,System.String)">
            <summary>
            讀取日期的星期.
            </summary>
            <param name="ADateTime">日期/時間.</param>
            <param name="sFormat">星期數值格式化字串, 參考 DateTime structure - "Custom Date and Time Format Strings".</param>
            <returns>日期的星期名稱(如星期一等).</returns>
        </member>
        <member name="M:HIS.Systems.HISDateTime.SetLocalTime(System.DateTime)">
            <summary>
            設定電腦目前日期/時間.
            </summary>
            <param name="ADateTime">新日期/時間.</param>
            <returns>是否電腦日期/時間已修改.</returns>
        </member>
        <member name="P:HIS.Systems.HISDateTime.Now">
            <summary>
            讀取目前日期/時間.
            </summary>
            <remarks>
            目前日期/時間, 時間為目前時間的時分秒.
            <br/><br/>
            .NET 的 DateTime.Now 包含亳秒(Millisecond), 較不適合做程式的時間比較.
            </remarks>
        </member>
        <member name="P:HIS.Systems.HISDateTime.Date">
            <summary>
            讀取目前日期.
            </summary>
            <remarks>目前日期/時間, 時間為 00:00:00.</remarks>
        </member>
        <member name="T:HIS.Systems.HISDateTime.DateTimeShiftType">
            <summary>
            日期/時間加/減類型.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISProcess">
            <summary>
            HIS 系統程序(Process)方法類別.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISProcess.RemoveStartFile(System.String)">
            <summary>
            移除程式啟動檔案.
            </summary>
            <param name="sStartID">程式啟動代號.</param>
        </member>
        <member name="M:HIS.Systems.HISProcess.StartProcess(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            啟動系統程式, 模擬系統登入程式使用.
            </summary>
            <param name="sProgramFile">系統程式檔案名稱.</param>
            <param name="sUserID">使用者帳號.</param>
            <param name="sUserName">使用者名稱.</param>
            <param name="sHospitalArea">院區代碼.</param>
            <param name="sSystemArea">系統區域.</param>
            <returns>系統程式程序物件(Process).</returns>
            <remarks>模擬系統登入程式使用.</remarks>
        </member>
        <member name="M:HIS.Systems.HISProcess.StartProcess(System.String,System.String,System.String,System.String,System.String,System.Data.DataRow)">
            <summary>
            啟動系統主程式.
            </summary>
            <param name="sProgramFile">系統主程式(HISSystem)檔案名稱.</param>
            <param name="sUserID">使用者帳號.</param>
            <param name="sUserName">使用者名稱.</param>
            <param name="sHospitalArea">院區代碼.</param>
            <param name="sSystemArea">系統區域.</param>
            <param name="UserRow">使用者記錄, 讀取使用者資訊(使用者環境變數值)使用.</param>
            <returns>系統主程式程序物件(Process).</returns>
            <remarks>系統登入程式使用.</remarks>
        </member>
        <member name="M:HIS.Systems.HISProcess.StartProcess(System.String,System.String,System.String,System.Object)">
            <summary>
            啟動系統程式功能.
            </summary>
            <param name="sProgramFile">系統程式檔案名稱.</param>
            <param name="sProgramNo">程式代碼.</param>
            <param name="sProgramName">程式名稱.</param>
            <param name="AParams">啟動參數物件, 讀取使用者登入資訊, 程式間傳遞啟動參數等使用.</param>
            <returns>系統程式程序物件(Process).</returns>
            <remarks>
            啟動系統程式功能(外部系統程式功能等)使用, 使用者資訊已存在.
            <br/><br/>
            於被啟動程式中使用 this.StartParams 存取啟動參數.
            <br/><br/>
            ClientInfo : <br/>
            .ManualStart(bool, 選項), 是否手動處理啟動相關程序, 是則需自行移除啟動檔案等, 避免因啟動檔案立即刪除而無法讀取啟動參數, 預設值為 false (自動處理啟動程序).<br/>
            .WaitForExit(bool, 選項), 是否等待啟動程式結束, 如等待啟動程式結束後讀取程式回應等. 預設值為 true (等待啟動程式結束). <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISProcess.StartProcess(System.Data.DataRow,System.String)">
            <summary>
            啟動系統程式功能.
            </summary>
            <param name="ProgramRow">程式記錄.</param>
            <param name="sProgramPath">程式檔案名稱.</param>
            <returns>系統程式程序物件(Process).</returns>
            <remarks>啟動系統程式功能(系統主程式使用), 使用者資訊已存在.</remarks>
        </member>
        <member name="T:HIS.Systems.HISBackgroundWorker">
             <summary>
             自訂 BackgroundWorker.
             </summary>
             <remarks>
             自訂 BackgroundWorker, 繼承 System.ComponentModel.BackgroundWorker 以提供必要的延伸屬性等.
             </remarks>
             <example>
             建立 BackgroundWorker(背景工作) 物件, 並藉由 Tag 屬性傳遞
             <code>
             private static void BackgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
             {
               HISParams NewParams;
               //
               NewParams = (HISParams)e.Argument;
               ...
             }
            
             private static void BackgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
             {
               HISBackgroundWorker NewBackgroundWorker;
               HISParams NewParams;
               //
               NewBackgroundWorker = (HISBackgroundWorker)sender;
               <b>NewParams = (HISParams)NewBackgroundWorker.Tag;</b>
               ...
             }
            
             private void AsyncTask(HISParams AParams)
             {
               // 非同步作業
               HISBackgroundWorker NewBackgroundWorker;
               //
               NewBackgroundWorker = new HISBackgroundWorker();
               NewBackgroundWorker.Tag = AParams;
               NewBackgroundWorker.DoWork += new DoWorkEventHandler(BackgroundWorker1_DoWork);
               NewBackgroundWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(BackgroundWorker1_RunWorkerCompleted);
               NewBackgroundWorker.RunWorkerAsync(AParams);
               ...
             }
             </code>
             </example>
        </member>
        <member name="M:HIS.Systems.HISBackgroundWorker.CancelWorker">
            <summary>
            取消 BackgroundWorker 背景程序(是否中止仍由背景程序程式碼處理).
            </summary>
        </member>
        <member name="M:HIS.Systems.HISBackgroundWorker.WaitForWorkerCompleted(System.Int32)">
            <summary>
            等待 BackgroundWorker 背景程序結束(包括取消, 完成等).
            </summary>
            <param name="iMillisecondsTimeOut"></param>
        </member>
        <member name="P:HIS.Systems.HISBackgroundWorker.Tag">
            <summary>
            物件 Tag.
            </summary>
            <remarks>物件 Tag, 建立 HISBackgroundWorker 於非同步程序執行前設定並可於 RunWorkerCompleted 等事件進行物件轉換存取等.</remarks>
        </member>
        <member name="P:HIS.Systems.HISBackgroundWorker.Tags">
            <summary>
            自訂屬性.
            </summary>
            <remarks>自訂屬性, 一般應用於作業程序的事件之間的延伸資料傳遞.</remarks>
        </member>
        <member name="P:HIS.Systems.HISBackgroundWorker.WorkerCancelled">
            <summary>
            是否 BackgroundWorker 已中止.
            </summary>
            <remarks>WorkerCancelled 屬性為背景程序中止判斷註記, 一般應用於 BackgroundWorker.DoWork 事件中判斷/中止執行中的背景程序程式碼.</remarks>
        </member>
        <member name="P:HIS.Systems.HISBackgroundWorker.WorkerCompleted">
            <summary>
            是否 BackgroundWorker 已完成(包括取消, 完成等).
            </summary>
            <remarks>若 BackgroundWorker 於 BackgroundWorker.DoWork 事件中判斷 WorkerCancelled 為 true 應中止背景程序程式碼(WorkerCompleted 將由 BackgroundWorker 自動設定為 true).</remarks>
        </member>
        <member name="F:HIS.Systems.HISCountDownDialogForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISCountDownDialogForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HIS.Systems.HISCountDownDialogForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISConvertOption">
            <summary>
            數值轉換選項.
            </summary>
            <remarks>僅應用於字元陣列轉換為字串.</remarks>
        </member>
        <member name="F:HIS.Systems.HISConvertOption.NoNullChar">
            <summary>忽略 \0 字元, 避免非預設的字串結果(如因 \0 造成字串內容遺失等).</summary>
        </member>
        <member name="F:HIS.Systems.HISConvertOption.TrimAll">
            <summary>字串結果執行 Trim() 移除左/右空白字元.</summary>
        </member>
        <member name="T:HIS.Systems.HISConvert">
            <summary>
            HIS 數值轉換.
            </summary>
            <remarks>
            請一律使用 HISConvert 類別方法, 如 ToInteger(), ToString(), ToDecimal() 等.
            <br/><br/>
            *非必要不使用 .NET 內建的 Convert 類別方法, 如 ToInt32(), ToString(), ToDecimal() 等, 以避免錯誤(非預期)的數值轉換結果.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToNull(System.Object)">
            <summary>
            空值數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>若數值為空字串則傳回 DBNull.Value.</returns>
            <remarks>若資料庫欄位數值為空字串一律儲存為 NULL.</remarks>
            <example>
            <code>
            NewRow["..."] = HISConvert.ToNull(OldRow["..."]);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISConvert.ToNull(System.String)">
            <summary>
            空值數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>若數值為空字串則傳回 DBNull.Value.</returns>
            <remarks>若資料庫欄位數值為空字串一律儲存為 NULL.</remarks>
            <example>
            <code>
            NewRow["..."] = HISConvert.ToNull(sValue);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISConvert.ToString(System.Object)">
            <summary>
            字串數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>字串數值, 若轉換數值為空值(null/DBNull)則傳回空字串.</returns>
            <remarks>本方法主要為應用於轉換數值可能為 null 的情況下, 若轉換數值必不為 null 應直接使用物件的 ToString() 方法, 如 <b>OldRow["Frequency"].ToString()</b>.</remarks>
            <example>
            <code>
            string sValue;
            //
            sValue = HISConvert.ToString(Value);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToString(System.Object,System.String)">
            <summary>
            字串數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>字串數值, 若轉換數值為空值(null/DBNull)則傳回替換數值.</returns>
            <remarks>本方法主要為應用於轉換數值可能為 null 的情況下, 若轉換數值必不為 null 應直接使用物件的 ToString() 方法, 如 <b>OldRow["Frequency"].ToString()</b>.</remarks>
            <example>
            <code>
            string sValue;
            //
            sValue = HISConvert.ToString(Value, "");
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISConvert.ToString(System.Char[])">
            <summary>
            字串數值轉換.
            </summary>
            <param name="Value">轉換數值(字元).</param>
            <returns>字串數值, 若轉換數值為空值(null/DBNull)則傳回空字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToString(System.Char[],HIS.Systems.HISConvertOption)">
            <summary>
            字串數值轉換.
            </summary>
            <param name="Value">轉換數值(字元).</param>
            <param name="ConvertOptions">數值轉換選項.</param>
            <returns>字串數值, 若轉換數值為空值(null/DBNull)則傳回空字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDateTime(System.Object)">
            <summary>
            日期/時間數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>DateTime 型態日期/時間數值.</returns>
            <remarks>本方法僅支援 DateTime 型態的數值轉換<b>不支援字串型態的數值</b>, 字串等數值型態表示的日期/時間轉換應使用 HISDateTime 類別方法.</remarks>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <example>
            <code>
            DateTime ModifyDate;
            //
            ModifyDate = HISConvert.ToDateTime(OldRow["ModifyDate"]);
            ...
            </code>
            </example>  
        </member>
        <member name="M:HIS.Systems.HISConvert.ToInteger(System.Object)">
            <summary>
            整數數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>整數數值, 若轉換數值為空值(null/DBNull)則傳回 0.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <remarks>
            *注意 : 數字字元(如 '0', '9' 等)轉型為整數不可使用 .NET 內建 Convert.ToInt32, 因為 Convert.ToInt32(char) 將傳回字元 <b>ASCII Code</b> 
            而非數字字元代表的數字, 因此數字字元轉型為整數應使用 HISConvert.ToInteger() 方法.
            </remarks>
            <example>
            <code>
            int iDays;
            //
            iDays = HISConvert.ToInteger(BASCORDRow["Days"]);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToInteger(System.Object,System.Int32)">
            <summary>
            整數數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <param name="AlternateValue">替換數值(整數).</param>
            <returns>整數數值, 若轉換數值為空值(null/DBNull)則傳回替換數值.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <remarks>
            *注意 : 數字字元(如 '0', '9' 等)轉型為整數不可使用 .NET 內建 Convert.ToInt32, 因為 Convert.ToInt32(char) 將傳回字元 <b>ASCII Code</b> 
            而非數字字元代表的數字, 因此數字字元轉型為整數應使用 HISConvert.ToInteger() 方法.
            </remarks>
            <example>
            <code>
            int iValue;
            //
            iValue = HISConvert.ToInteger(Value, -1);
            if (iValue == -1)
              return;
            ...
            </code>
            </example>  
        </member>
        <member name="M:HIS.Systems.HISConvert.ToInteger(System.String)">
            <summary>
            整數數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>整數數值, 若轉換數值為空值(null/DBNull)則傳回 0.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <remarks>
            *注意 : 數字字元(如 '0', '9' 等)轉型為整數不可使用 .NET 內建 Convert.ToInt32, 因為 Convert.ToInt32(char) 將傳回字元 <b>ASCII Code</b> 
            而非數字字元代表的數字, 因此數字字元轉型為整數應使用 HISConvert.ToInteger() 方法.
            </remarks>
            <example>
            <code>
            int iValue;
            //
            iValue = HISConvert.ToInteger(Value);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDecimal(System.Object)">
            <summary>
            數字數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>數字數值, 若轉換數值為空值(null/DBNull)則傳回 0.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <example>
            <code>
            decimal dDose;
            //
            dDose = HISConvert.ToDecimal(BASCORDRow["Dose"]);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDecimal(System.Object,System.Decimal)">
            <summary>
            數字數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>數字數值, 若轉換數值為空值(null/DBNull)則傳回替換數值.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <example>
            <code>
            decimal dDose;
            //
            foreach (LoopRow in ...)
            {
              dDose = HISConvert.ToDecimal(LoopRow["Dose"], 0);
              ...
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDecimal(System.String)">
            <summary>
            數字數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>數字數值, 若轉換數值為空值(null/DBNull)則傳回 0.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDouble(System.Object,System.Double)">
            <summary>
            浮點數數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>浮點數數值, 若轉換數值為空值(null/DBNull)則傳回替換數值.</returns>
            <remarks>*非必要請勿使用本方法, 請一律使用 <b>HISConvert.ToDecimal()</b> 方法.</remarks>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDouble(System.Object)">
            <summary>
            浮點數數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>浮點數數值, 若轉換數值為空值(null/DBNull)則傳回 0.</returns>
            <remarks>*非必要請勿使用本方法, 請一律使用 <b>HISConvert.ToDecimal()</b> 方法.</remarks>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToDouble(System.String)">
            <summary>
            浮點數數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>浮點數數值, 若轉換數值為空值(null/DBNull)則傳回 0.</returns>
            <remarks>*非必要請勿使用本方法, 請一律使用 <b>HISConvert.ToDecimal()</b> 方法.</remarks>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISConvert.ToBoolean(System.Object,System.Boolean)">
            <summary>
            Boolean 數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <param name="AlternateValue">替換數值(Boolean).</param>
            <returns>Boolean 數值, 若轉換數值為空值(null/DBNull)則傳回替換數值.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
            <example>
            <code>
            bool bSuccess;
            //
            bSuccess = HISConvert.ToBoolean(Value, false);
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISConvert.ToBoolean(System.Object)">
            <summary>
            Boolean 數值轉換.
            </summary>
            <param name="Value">轉換數值.</param>
            <returns>Boolean 數值, 若數值為空值(null, DBNull)則傳回 false.</returns>
            <exception cref="T:System.Exception">若轉換數值不合法將引發例外.</exception>
        </member>
        <member name="T:HIS.Systems.HISSimilarOptions">
            <summary>
            相似查詢選項.
            </summary>
        </member>
        <member name="F:HIS.Systems.HISSimilarOptions.None">
            <summary>如 '%R%', 相似查詢符號 % 置於左/右方, 此為預設相似查詢選項可不需指定.</summary>
        </member>
        <member name="F:HIS.Systems.HISSimilarOptions.SimilarLeft">
            <summary>如 '%R', 相似查詢符號 % 置於左方.</summary>
        </member>
        <member name="F:HIS.Systems.HISSimilarOptions.SimilarRight">
            <summary>如 'R%', 相似查詢符號 % 置於右方.</summary>
        </member>
        <member name="F:HIS.Systems.HISSimilarOptions.SimilarUpper">
            <summary>大寫的相似查詢.</summary>
        </member>
        <member name="T:HIS.Systems.HISParamRange">
            <summary>
            參數數值範圍.
            </summary>
        </member>
        <member name="F:HIS.Systems.HISParamRange.RangeStart">
            <summary>數值範圍起始數值.</summary>
        </member>
        <member name="F:HIS.Systems.HISParamRange.RangeEnd">
            <summary>數值範圍終止數值.</summary>
        </member>
        <member name="T:HIS.Systems.HISParams">
            <summary>
            查詢參數物件.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISParams.#ctor(System.Data.DataRow)">
            <summary>
            依資料列(DataRow)的表格的主要鍵值建立參數項目.
            </summary>
            <param name="ARow">資料列物件.</param>
            <exception cref="T:System.Exception">若表格無主要鍵值將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISParams.#ctor(System.Data.DataRow,System.String)">
            <summary>
            依指定欄位(DataColumn)的數值建立參數項目.
            </summary>
            <param name="ARow">資料列物件.</param>
            <param name="sKeyColumns">建立參數項目的欄位名稱(一或多個), 如 'Column', 'Column1, Column2, Column3, ...'.</param>
            <exception cref="T:System.Exception">若欄位不存在將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISParams.Initialize(System.Boolean)">
            <summary>
            參數物件初始函式.
            </summary>
            <param name="bEnvironment">是否包含用戶端資訊物件.</param>
        </member>
        <member name="M:HIS.Systems.HISParams.GetStatement(System.String)">
            <summary>
            參數項目的 SQL 表示敍述.
            </summary>
            <param name="sParamName">參數項目名稱.</param>
            <returns>參數項目的 SQL 表示敍述, 如 'Column1 = :Column1', 'Column1 LIKE :Column1' 等.</returns>
            <remarks>若參數項目不存在不引發例外, 並傳回空字串("").</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetTableStatement(System.String,System.String)">
            <summary>
            參數項目的 SQL 表示敍述.
            </summary>
            <param name="sTableName">表格名稱, 用以標示 SQL 敍述中欄位的隸屬表格.</param>
            <param name="sParamName">參數項目名稱.</param>
            <returns>參數項目的 SQL 表示敍述, 如 'Table1.Column1 = :Column1', 'Table1.Column1 LIKE :Column1' 等.</returns>
            <remarks>若參數項目不存在不引發例外, 並傳回空字串("").</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Clear">
            <summary>
            清除參數物件中所有的參數項目.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISParams.ClearAll">
            <summary>
            清除參數物件中所有的參數項目及用戶端資訊內容(但仍保留系統內建資訊).
            </summary>
        </member>
        <member name="M:HIS.Systems.HISParams.Clone">
            <summary>
            建立參數物件的副本.
            </summary>
            <returns>參數物件副本.</returns>
            <remarks>參數物件副本不含原參數項目內容, 僅包含用戶端資訊(ClientInfo).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Copy">
            <summary>
            建立參數物件的複本.
            </summary>
            <returns>參數物件複本.</returns>
            <remarks>參數物件複本包含原參數項目內容及用戶端資訊(ClientInfo)等.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Exists(System.String)">
            <summary>
            檢查參數是否皆存在.
            </summary>
            <param name="sParamNames">參數名稱字串, 如 'Param1', 'Param1, Param2' 等.</param>
            <returns>若參數皆存在則傳回 true, 否則若參數其中之一不存在則傳回 false.</returns>
            <remarks>參數名稱字串可包含一個或多個參數名稱.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Exists(System.String,System.Boolean)">
            <summary>
            檢查參數是否皆存在.
            </summary>
            <param name="sParamNames">參數名稱字串, 如 'Param1', 'Param1, Param2' 等.</param>
            <param name="bException">任一參數不存在是否引發例外(Exception).</param>
            <returns>若參數皆存在則傳回 true, 否則若參數任一不存在則傳回 false 或引發例外.</returns>\
            <remarks>參數名稱字串可包含一個或多個參數名稱.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.CheckParams(System.String)">
            <summary>
            檢查參數是否皆存在(且皆不為空條件).
            </summary>
            <param name="sParamNames">參數名稱字串, 如 'Param1', 'Param1, Param2' 等.</param>
            <returns>若參數皆存在則傳回 true, 否則若參數任一不存在則傳回 false.</returns>
            <remarks>參數名稱字串可包含一個或多個參數名稱.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.CheckAnyParams(System.String)">
            <summary>
            是否任一參數存在(含空條件).
            </summary>
            <param name="sParamNames">參數名稱字串, 如 'Param1', 'Param1, Param2' 等.</param>
            <returns>若為 true 表示任一參數存在, 否則為 false.</returns>
            <remarks>參數名稱字串可包含一個或多個參數名稱, 參數名稱之間以逗號(,)隔開.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.ReadRow(System.Data.DataRow)">
            <summary>
            依資料列隸屬表格的主要鍵值(Primary key)建立對應的參數項目, 可簡化參數項目新增程序.
            </summary>
            <param name="ARow">資料列物件.</param>
            <remarks>若資料列隸屬表格無主要鍵值將引發例外.</remarks>
            <example>
            <code>
            HISParams NewParams;
            ...
            NewParams = new HISParams(INACARMRow);
            ...
            </code>
            原始寫法
            <code>
            HISParams NewParams;
            ...
            NewParams = new HISParams();
            NewParams.Add("MedNo", INACARMRow["MedNo"]);
            NewParams.Add("VisitSeq", INACARMRow["VisitSeq"], typeof(int));
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISParams.ReadRow(System.Data.DataRow,System.String)">
            <summary>
            依資料列的指定鍵值建立對應的參數項目.
            </summary>
            <param name="ARow">資料列物件.</param>
            <param name="sKeyColumns">指定鍵值欄位名稱, 如 'Column1', 'Column1, Column2' 等.</param>
            <remarks>若指定鍵值欄位不存在(資料列隸屬表格)將引發例外.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.Object,System.Type)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值.</param>
            <param name="AType">參數資料型態, 如 typeof(int), typeof(decimal), typeof(DateTime) 等.</param>
            <remarks>目前支援資料型態包括整數, 浮點數, DateTime 等, 其他則一律視為字串參數項目.</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String)">
            <summary>
            新增參數項目(空參數), 查詢時將使用空條件(無符合資料)執行查詢.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <remarks>空參數限字串參數使用, 參數為整數等應明確指定參數的空條件數值.</remarks>
            <example>
            事件參數(EventArgs)的參數物件加入參數項目 :
            <code>
            e.Params.Add("MedNo"); // 新增空條件(字串)
            e.Params.Add("VisitSeq", 0); 新增空條件(整數)
            
            e.Params.Add("MedNo", sMedNo); // 新增字串參數
            e.Params.Add("VisitSeq", iVisitSeq); // 新增整數參數
            
            e.Params.Add("MedNo", NewRow["MedNo"]); // 新增字串參數, 物件數值未指定資料型態預設視為字串型態
            e.Params.Add("VisitSeq", ARow["VisitSeq"], typeof(int)); // 新增整數參數, 物件數值使用 typeof() 指定資料型態
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.Object)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(物件), 接受 null, DBNull.Value 等空值(自動視為空字串).</param>
            <remarks>
            參數數值為物件將一律視為字串參數.
            <br/>
            若參數(同名)已存在則覆蓋原參數, 若參數數值空白(Trim = "")將忽略不加入且若參數項目已存在則移除, 其他依此類推.
            </remarks>
            <example>
            事件參數(EventArgs)的參數物件加入參數項目 :
            <code>
            e.Params.Add("MedNo", MedNoText.Text);
            </code>
            建立參數物件後加入參數項目 :
            <code>
            HISParams NewParams;
            //
            NewParams = new HISParams();
            NewParams.Add("MedNo", MedNoText.Text);
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(字串), 接受 null 等空值(自動視為空字串).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.Int32)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(整數).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.Decimal)">
            <summary>
            新增參數項目(數字).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值.</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String[])">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValues">參數數值(字串陣列).</param>
            <remarks>
            若字串陣列中數值皆為空字串則忽略不加入且若參數項目已存在則移除.
            <br/><br/>
            其他參閱新增參數項目(物件)
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.Int32[])">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValues">參數數值(整數陣列).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.Object,System.Type)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValue">參數數值.</param>
            <param name="AType">參數資料型態, 如 typeof(int), typeof(decimal), typeof(DateTime) 等.</param>
            <remarks>
            目前支援資料型態包括整數, 浮點數, DateTime 等, 其他則一律視為字串參數項目.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.String)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValue">參數數值(字串).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.Int32)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValue">參數數值(整數).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.Decimal)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValue">參數數值(浮點數).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.DateTime)">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValue">參數數值(DateTime).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.String[])">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValues">參數數值(字串陣列).</param>
            <remarks>
            若字串陣列中數值皆為空字串則忽略不加入且若參數項目已存在則移除.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Add(System.String,System.String,System.Int32[])">
            <summary>
            新增參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="sCompareOperator">比較運算子(如 &gt; &lt; 等).</param>
            <param name="ParamValues">參數數值(整數陣列).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddSimilar(System.String,System.Object)">
            <summary>
            新增參數項目(相似查詢).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(物件).</param>
            <remarks>
            相似查詢使用 %XXX% 格式.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddSimilar(System.String,System.Object,System.Boolean)">
            <summary>
            新增參數項目(相似查詢).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(物件).</param>
            <param name="bSimilarLeft">相似查詢格式, 若為 true 表示文字左方相似使用 %XXX 格式, false 表示文字右方相似使用 XXX% 格式.</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddSimilar(System.String,System.Object,HIS.Systems.HISSimilarOptions)">
            <summary>
            新增參數項目(相似查詢).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(物件).</param>
            <param name="SimilarOptions">相似查詢選項, 詳細參考 HISSimilarOptions.</param>
            <remarks>
            未指定相似查詢選項預設使用 %XXXXX% 格式.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
            <seealso cref="T:HIS.Systems.HISSimilarOptions">HISSimilarOptions</seealso>
        </member>
        <member name="M:HIS.Systems.HISParams.AddSimilar(System.String,System.String)">
            <summary>
            新增參數項目(相似查詢).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(字串).</param>
            <remarks>
            相似查詢使用 %XXX% 格式.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddSimilar(System.String,System.String,System.Boolean)">
            <summary>
            新增參數項目(相似查詢).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(字串).</param>
            <param name="bSimilarLeft">相似查詢格式, 若為 true 表示文字左方相似使用 %XXX 格式, false 表示文字右方相似使用 XXX% 格式.</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddSimilar(System.String,System.String,HIS.Systems.HISSimilarOptions)">
            <summary>
            新增參數項目(相似查詢).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="ParamValue">參數數值(字串).</param>
            <param name="SimilarOptions">相似查詢選項, 詳細參考 HISSimilarOptions.</param>
            <remarks>
            未指定相似查詢選項預設使用 %XXXXX% 格式.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
            <seealso cref="T:HIS.Systems.HISSimilarOptions">HISSimilarOptions</seealso>
        </member>
        <member name="M:HIS.Systems.HISParams.AddRange(System.String,System.String,System.String)">
            <summary>
            新增參數項目(數值範圍).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="Value1">參數起始數值(字串).</param>
            <param name="Value2">參數終止數值(字串).</param>
            <remarks>
            若起始/終止數值皆為空字串則忽略不加入且若參數項目已存在則移除.
            <br/><br/>
            若起始/終止數值其一為空字串則起始/終止數值互為另一參數數值, 即若起始數值存在而終止數值空白(A, "")則終止數值同起始數值(A, A), 反之亦然.
            <br/><br/>
            其他參閱新增參數項目(物件).
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddRange(System.String,System.DateTime,System.DateTime)">
            <summary>
            新增參數項目(數值範圍).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="Value1">參數起始數值(DateTime).</param>
            <param name="Value2">參數終止數值(DateTime).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.AddRange(System.String,System.Int32,System.Int32)">
            <summary>
            新增參數項目(數值範圍).
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="Value1">參數起始數值(整數).</param>
            <param name="Value2">參數終止數值(整數).</param>
            <remarks>其他參閱新增參數項目(物件).</remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.Remove(System.String)">
            <summary>
            移除參數項目.
            </summary>
            <param name="sParamName">參數名稱.</param>
        </member>
        <member name="M:HIS.Systems.HISParams.GetString(System.String,System.String)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值.</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].AsString</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetStrings(System.String,System.String)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(字串).</param>
            <returns>參數數值陣列, 若參數項目不存在則傳回預設值陣列, 但若預設值為空白則將傳回空數值陣列.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].AsStrings</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetString(System.String,System.String,HIS.Systems.HISParamRange)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(字串).</param>
            <param name="AParamRange">數值範圍.</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].StartValue/EndValue</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetDouble(System.String,System.Double)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(浮點數).</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].AsDouble</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetDouble(System.String,System.Double,HIS.Systems.HISParamRange)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(浮點數).</param>
            <param name="AParamRange">數值範圍.</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].StartValue/EndValue</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetDecimal(System.String,System.Decimal)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(數字).</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].AsDecimal</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetDecimal(System.String,System.Decimal,HIS.Systems.HISParamRange)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(數字).</param>
            <param name="AParamRange">數值範圍.</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].StartValue/EndValue</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetInteger(System.String,System.Int32)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(整數).</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].AsInteger</i>.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISParams.GetInteger(System.String,System.Int32,HIS.Systems.HISParamRange)">
            <summary>
            讀取參數數值.
            </summary>
            <param name="sParamName">參數名稱.</param>
            <param name="DefaultValue">預設值(整數).</param>
            <param name="AParamRange">數值範圍.</param>
            <returns>參數數值, 若參數項目不存在則傳回預設值.</returns>
            <remarks>
            若參數項目不存在則傳回預設值(不引發例外).
            <br/><br/>
            *此 overload 方法僅應用於參數項目可能不存在的情況, 若參數項目為必要則應使用必要參數存取方式 - <i>NewParams["..."].StartValue/EndValue</i>.
            </remarks>
        </member>
        <member name="P:HIS.Systems.HISParams.Item(System.Int32)">
            <summary>
            讀取參數項目(參數索引).
            </summary>
            <param name="iIndex">參數項目索引.</param>
            <returns>參數項目物件</returns>
            <exception cref="T:System.Exception">若索引位置超出索引範圍將引發例外.</exception>
        </member>
        <member name="P:HIS.Systems.HISParams.Item(System.String)">
            <summary>
            讀取參數項目(參數名稱).
            </summary>
            <param name="sName">參數項目名稱.</param>
            <returns>參數項目物件</returns>
            <remarks>若參數項目必須存在則應使用此參數讀取方式(Params["..."]), 即可同時檢查必要參數是否存在.</remarks>
            <exception cref="T:System.Exception">若參數項目不存在將引發例外.</exception>
            <example>
            讀取必要參數數值 :
            <code>
            string sMedNo = "";
            ...
            sMedNo = e.Params["MedNo"].AsString;
            </code>
            </example>
        </member>
        <member name="P:HIS.Systems.HISParams.Keys">
            <summary>
            參數項目名稱集合.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISParams.Values">
            <summary>
            參數項目物件集合.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISParams.FilterExpr">
            <summary>
            傳回參數對應的過濾條件字串.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISParams.Count">
            <summary>
            參數物件的參數項目總個數.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISParams.HasParams">
            <summary>
            參數物件是否包含參數項目.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISParams.ClientInfo">
            <summary>
            參數物件內含的用戶端資訊物件.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISCustomParam">
            <summary>
            參數項目物件基礎類別.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.Statement">
            <summary>
            讀取參數的 SQL 子句, 如 Column1 = :Column1, Column1 &lt;&gt; :Column1 等.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.AsString">
            <summary>
            讀取 string 型態的參數數值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.AsDouble">
            <summary>
            讀取 double 型態的參數數值.
            <br/><br/>
            *小數點數值請使用 decimal 資料型態, 非必要請勿使用 double 資料型態以避免非預期的執行問題(如小數點判斷 1 != 1.0 等).
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.AsDecimal">
            <summary>
            讀取 decimal 型態的參數數值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.AsInteger">
            <summary>
            讀取 int 型態的參數數值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.FilterExpr">
            <summary>
            參數組成的過濾運算式, 一般應用於 DataTable.Select() 或 DataView.RowFilter 等.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.Name">
            <summary>
            參數名稱.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.AliasName">
            <summary>
            參數別名.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.StartValue">
            <summary>
            參數開始數值, 僅應用於參數為起/迄數值者.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.EndValue">
            <summary>
            參數結束數值, 僅應用於參數為起/迄數值者.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.SQLValue">
            <summary>
            參數數值的 SQL 數值(原始大小寫, 若為相似查詢參數則將包含 LIKE 字元 %).
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.UpperValue">
            <summary>
            參數數值的大寫數值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.UpperSQLValue">
            <summary>
            參數數值的大寫數值(若為相似查詢參數則將包含 LIKE 字元 %).
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.ParamType">
            <summary>
            參數項目的資料型態.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.CompareOperator">
            <summary>
            參數項目的比較運算子(如 &gt; &lt; 等
            </summary>
        </member>
        <member name="P:HIS.Systems.HISCustomParam.BoolOperator">
            <summary>
            參數項目的數值間的條件運算子, 如 AND (單一參數, 範圍參數), OR (多值參數) 等.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISSimpleParam">
            <summary>
            簡單參數項目物件
            </summary>
        </member>
        <member name="M:HIS.Systems.HISSimpleParam.GetStatement">
            <summary>
            傳回參數的 SQL 敍述字串, 如 ColumnName = :ColumnName, ColumnName = :ColumnNameA 等
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISSimpleParam.GetTableStatement(System.String)">
            <summary>
            傳回參數的 SQL 敍述(表格名稱), 如 TableName.ColumnName = :ColumnName, TableName.ColumnName = :ColumnNameA 等
            </summary>
            <param name="sTableName">表格名稱</param>
            <returns></returns>
        </member>
        <member name="T:HIS.Systems.HISSimilarParam">
            <summary>
            相似(LIKE)參數項目物件
            </summary>
        </member>
        <member name="T:HIS.Systems.HISValuesParam">
            <summary>
            多值參數項目物件
            </summary>
        </member>
        <member name="T:HIS.Systems.HISRangeParam">
            <summary>
            範圍(起/迄)參數項目物件, 參數數值固定包含開始/結束數值範圍
            </summary>
        </member>
        <member name="T:HIS.Systems.HISClientInfo">
            <summary>
            用戶端資訊物件.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.Clear">
            <summary>
            清除所有用戶端資訊內容(包含系統內建資訊, 如系統區域等)
            </summary>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.Clear(System.Boolean)">
            <summary>
            清除用戶端資訊內容.
            </summary>
            <param name="bKeepSystemInfo">是否保留用戶端資訊中的系統內建資訊(如系統區域等).</param>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.GetValue(System.String,System.Object)">
            <summary>
            讀取用戶端資訊數值.
            </summary>
            <param name="sKey">鍵值名稱.</param>
            <param name="DefaultValue">預設值.</param>
            <returns>用戶端資訊數值, 若鍵值名稱不存在則傳回預設值.</returns>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.GetString(System.String,System.String)">
            <summary>
            讀取字串數值.
            </summary>
            <param name="sKey">鍵值名稱.</param>
            <param name="DefaultValue">預設值.</param>
            <returns>字串數值, 若鍵值不存在則傳回預設值.</returns>
            <remarks>
            <i>DefaultValue</i> 函式參數應用於鍵值可能不存在時使用, 若鍵值必定存在則可不指定預設值.
            <br/><br/>
            *鍵值名稱不區分大小寫.
            </remarks>
            <example>
            讀取字串數值, 鍵值必定存在 :
            <code>
            sValue = this.Params.ClientInfo[<i>"Key"</i>].ToString();
            </code>
            讀取字串數值, 鍵值可能不存在 :
            <code>
            sValue = this.Params.ClientInfo.GetString(<i>"Key"</i>, "");
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.GetUser(System.String)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <returns>使用者資訊.</returns>
            <exception cref="T:System.Exception">若使用者資料名稱的環境變數不存在將引發例外.</exception>
            <remarks>若使用者資料可能為空值則應使用 this.GetUser(sKey, "") 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.GetUser(System.String,System.Int32)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <param name="iType">整數型態(HISConst.TYPE_Int).</param>
            <returns>使用者資訊.</returns>
            <exception cref="T:System.Exception">若使用者資料名稱的環境變數不存在將引發例外.</exception>
            <remarks>若使用者資料可能為空值則應使用 this.GetUser(sKey, 0, HISConst.TYPE_Int) 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.GetUser(System.String,System.String)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <param name="sAlternative">替代數值.</param>
            <returns>使用者資訊.</returns>
            <exception cref="T:System.Exception">若使用者資料名稱的環境變數不存在將引發例外.</exception>
            <remarks>若使用者資料可能為空值則應使用 this.GetUser(sKey, "") 等格式.</remarks>
        </member>
        <member name="M:HIS.Systems.HISClientInfo.GetUser(System.String,System.Int32,System.Int32)">
            <summary>
            讀取使用者資料.
            </summary>
            <param name="sKey">使用者資料名稱(欄位名稱), 名稱不分大小寫.</param>
            <param name="iAlternative">替代數值.</param>
            <param name="iType">整數型態(HISConst.TYPE_Int).</param>
            <returns>使用者資訊.</returns>
            <exception cref="T:System.Exception">若使用者資料名稱的環境變數不存在將引發例外.</exception>
            <remarks>若使用者資料可能為空值則應使用 this.GetUser(sKey, 0, HISConst.TYPE_Int) 等格式.</remarks>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.Item(System.String)">
            <summary>
            存取用戶端資訊數值.
            </summary>
            <param name="sKey">用戶端資訊名稱.</param>
            <returns>
            用戶端資訊數值, 若用戶端資訊名稱相對的用戶端資訊不存在將不引發例外, 預設傳回空值 - DBNull.Value.
            </returns>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.SystemID">
            <summary>
            目前執行程式的系統代碼, 如 SysPrj.exe 的 SYSPRJ (一律自動轉大寫).
            </summary>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.StartSystemID">
            <summary>
            目前執行程式的啟動系統代碼, 如 SysPrj.exe 的 SYSPRJ (一律自動轉大寫).
            </summary>
            <remarks>若有需要可自行設定啟動系統代碼, 如 NewParams.ClientInfo.StartSystemID = ... 等.</remarks>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.MachineName">
            <summary>
            執行程式的電腦名稱.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.Print">
            <summary>
            是否為列印(報表參數物件隸屬用戶端資訊).
            </summary>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.WebClient">
            <summary>
            是否為 Web 應用程式(參數物件).
            </summary>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.LocalServer">
            <summary>
            Local server.
            </summary>
            <remarks><b>限內部使用.</b></remarks>
        </member>
        <member name="P:HIS.Systems.HISClientInfo.Client">
            <summary>
            作業是否已 Client/Server 模式執行.
            </summary>
            <remarks>一般僅測試時期及 Client/Server 架構程式使用.
            <br/><br/>
            *若為測試時期使用則測試後應移除.
            </remarks>
        </member>
        <member name="T:HIS.Systems.HISReportParams">
            <summary>
            報表查詢參數物件
            </summary>
        </member>
        <member name="F:HIS.Systems.HISInputBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISInputBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HIS.Systems.HISInputBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISFtp">
            <summary>
            簡易 Ftp 物件.
            </summary>
            <example>
            <code>
            HISFtp NewFtp;
            //
            NewFtp = new HISFtp();
            try
            {
              NewFtp.FtpServer = "127.0.0.1";
              NewFtp.UserName = "usr";
              NewFtp.Password = "pwd";
              NewFtp.Connect();
              //
              NewFtp.UseBinary = true;
              NewFtp.WorkingDirectory = "/bin/network";
              NewFtp.Get("file.zip");
            }
            catch (Exception Ex)
            {
              NewFtp.Disconnect();
              HISDialog.ErrorDlg("Ftp 有誤.", Ex);
            }
            finally
            {
              NewFtp.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISFtp.Connect">
            <summary>
            連結 Ftp server.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISFtp.Disconnect">
            <summary>
            結束 Ftp 連線.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISFtp.Get(System.String)">
            <summary>
            下載 Ftp server 檔案至 Local.
            </summary>
            <param name="sRemoteFileName">遠端檔案名稱.</param>
            <example>
            <code>
            NewFtp.Get("file.zip");
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISFtp.Get(System.String,System.String)">
            <summary>
            下載 Ftp server 檔案至 Local.
            </summary>
            <param name="sRemoteFileName">遠端檔案名稱.</param>
            <param name="sFileName">Local 檔案名稱, 可包含完整檔案名稱.</param>
            <example>
            <code>
            NewFtp.Get("file.zip", HISDirectory.GetCurrentPath() + "file.zip");
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISFtp.Put(System.String)">
            <summary>
            上傳 Local 檔案至 Ftp server.
            </summary>
            <param name="sFileName">Local 檔案名稱, 可包含完整檔案名稱.</param>
            <remarks>
            遠端檔案名稱同 Local 檔案名稱(路徑除外).
            <br/><br/>
            上傳時將上傳檔案至 WorkingDirectory (遠端路徑).
            </remarks>
            <example>
            <code>
            NewFtp.UseBinary = true;
            NewFtp.Put("file.zip");
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISFtp.Put(System.String,System.String)">
            <summary>
            上傳 Local 檔案至 Ftp server.
            </summary>
            <param name="sFileName">Local 檔案名稱, 可包含完整檔案名稱.</param>
            <param name="sRemoteFileName">遠端檔案名稱.</param>
            <remarks>
            遠端檔案名稱同 Local 檔案名稱(路徑除外).
            <br/><br/>
            上傳時將上傳檔案至 WorkingDirectory (遠端路徑).
            </remarks>
            <example>
            <code>
            NewFtp.UseBinary = true;
            NewFtp.Put(HISDirectory.GetCurrentPath() + "file.zip", "file2.zip");
            ...
            </code>
            </example>
        </member>
        <member name="P:HIS.Systems.HISFtp.FtpServer">
            <summary>
            Ftp server 名稱或位址, 如 Ftp1, 127.0.0.1 等.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISFtp.UserName">
            <summary>
            Ftp server 連線帳號.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISFtp.Password">
            <summary>
            Ftp server 連線密碼.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISFtp.WorkingDirectory">
            <summary>
            Ftp 工作路徑, 格式如 /bin, /bin/network 等.
            </summary>
            <remarks>Ftp 工作路徑預設為 / (根目錄).</remarks>
            <example>
            <code>
            NewFtp.WorkingDirectory = "/bin/network";
            ...
            </code>
            </example>
        </member>
        <member name="P:HIS.Systems.HISFtp.UseBinary">
            <summary>
            是否使用二進位模式.
            </summary>
            <remarks>若檔案為文字檔案(如 .txt 等)為 false, 檔案為二進位檔案(如 .exe 等)則為 true, 預設值為 false.</remarks>
        </member>
        <member name="F:HIS.Systems.HISConst.SNumeric">
            <summary>數值格式化字串, 如 0.80 -> 0.8, 應用於 ToString() 方法.</summary>
        </member>
        <member name="T:HIS.Systems.HISObjectDictionary">
            <summary>
            物件字典類別.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.RowToTable2(System.Data.DataRow)">
            <summary>
            <b>限內部使用.</b>
            </summary>
            <param name="Row"></param>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.RowToTable(System.Object)">
            <summary>
            <b>限內部使用.</b>
            </summary>
            <param name="Row"></param>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.RowsToTable(System.Object)">
            <summary>
            <b>限內部使用.</b>
            </summary>
            <param name="Rows"></param>
            <returns></returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.#ctor">
            <summary>
            物件字典物件, 提供以 Key/Value 格式存取物件的功能, Key 不區分大小寫(內部將自動轉換為大寫), Value 則可存放任何形態的物件
            (但若 Value 需要 Serialization 時(如遠端傳遞等)需確定 Value 的物件型態是否為 [Serializable].
            <br/><br/>
            *.NET 內建 [Serializable] 物件, 包括基本資料型態(如 int, string, decimal, DataTime 等等), 資料集物件(如 DataSet, DataTable, DataRow 等)等.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetObject(System.String,System.Object)">
            <summary>
            讀取 System.Object 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="DefaultValue">預設值.</param>
            <returns>物件數值, 若鍵值不存在則傳回預設值.</returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetString(System.String,System.String)">
            <summary>
            讀取 string 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="DefaultValue">預設值.</param>
            <returns>字串數值, 若鍵值不存在則傳回預設數值.</returns>
            <remarks>
            <i>DefaultValue</i> 函式參數應用於鍵值可能不存在時使用, 若鍵值必定存在則可不指定預設數值.
            <br/><br/>
            *鍵值名稱不區分大小寫.
            </remarks>
            <example>
            讀取字串數值, 鍵值必定存在 :
            <code>
            sValue = this.Request[<i>"Key"</i>].ToString();
            </code>
            讀取字串數值, 鍵值可能不存在 :
            <code>
            sValue = this.Request.GetString(<i>"Key"</i>, "");
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetDouble(System.String)">
            <summary>
            讀取 double 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <returns>數值.</returns>
            <exception cref="T:System.Exception">若鍵值名稱不存在將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetDouble(System.String,System.Double)">
            <summary>
            讀取 double 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="DefaultValue">預設值.</param>
            <returns>數值.</returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetDecimal(System.String)">
            <summary>
            讀取 decimal 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <returns>數值.</returns>
            <exception cref="T:System.Exception">若鍵值名稱不存在將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetDecimal(System.String,System.Decimal)">
            <summary>
            讀取 decimal 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="DefaultValue">預設值.</param>
            <returns>數值.</returns>
            <exception cref="T:System.Exception">若鍵值名稱不存在將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetInteger(System.String)">
            <summary>
            讀取 int 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <returns>數值.</returns>
            <exception cref="T:System.Exception">若鍵值名稱不存在將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetInteger(System.String,System.Int32)">
            <summary>
            讀取 int 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="DefaultValue">預設值.</param>
            <returns>數值.</returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetBoolean(System.String)">
            <summary>
            讀取 bool 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <returns>數值.</returns>
            <exception cref="T:System.Exception">若鍵值名稱不存在將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.GetBoolean(System.String,System.Boolean)">
            <summary>
            讀取 bool 型態的數值.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="DefaultValue">預設值.</param>
            <returns>數值.</returns>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.Add(System.String,System.Object)">
            <summary>
            新增物件項目.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.Remove(System.String)">
            <summary>
            移除物件項目.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
        </member>
        <member name="M:HIS.Systems.HISObjectDictionary.Contains(System.String)">
            <summary>
            鍵值名稱是否存在.
            </summary>
            <param name="sKey">鍵值名稱(不分大小寫).</param>
            <returns>若為 true 表示鍵值名稱存在, 否則為 false.</returns>
        </member>
        <member name="P:HIS.Systems.HISObjectDictionary.Item(System.String)">
            <summary>
            讀取物件.
            </summary>
            <param name="Key">鍵值名稱, 不分大小寫.</param>
            <returns>鍵值名稱對應的物件.</returns>
            <exception cref="T:System.Exception">若鍵值名稱無對應的物件將引發例外.</exception>
        </member>
        <member name="P:HIS.Systems.HISObjectDictionary.Keys">
            <summary>
            鍵值名稱集合.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISObjectDictionary.Values">
            <summary>
            物件集合.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISFormRequest">
            <summary>
            視窗要求物件.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISFormResponse">
            <summary>
            視窗回應物件.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISRequest">
            <summary>
            要求物件.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISResponse">
            <summary>
            回應物件.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISKeyValueCollection">
            <summary>
            Key/Value 集合類別, Key 不分大小寫
            </summary>
        </member>
        <member name="T:HIS.Systems.HISEventArgs">
            <summary>
            HIS 通用函式參數類別.
            </summary>
            <remarks>通用函式參數, 一般應用於系統通用事件的事件參數或新事件參數類別的繼承類別, 以提供通用的事件資料屬性.</remarks>
        </member>
        <member name="P:HIS.Systems.HISEventArgs.Value">
            <summary>
            數值.
            </summary>
            <remarks>數值, 一般應用於作業程序的事件之間的資料傳遞, 預設值為 DBNull.Value.</remarks>
        </member>
        <member name="P:HIS.Systems.HISEventArgs.Tags">
            <summary>
            自訂屬性.
            </summary>
            <remarks>自訂屬性, 一般應用於作業程序的事件之間的延伸資料傳遞.</remarks>
        </member>
        <member name="P:HIS.Systems.HISEventArgs.Cancel">
            <summary>
            是否取消, 如是否取消選取等.
            </summary>
            <remarks>若為 true 表示取消, 否則為 false, 預設值為 false.</remarks>
        </member>
        <member name="T:HIS.Systems.HISProgressEventArgs">
            <summary>
            進度事件參數類別.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISProgressEventArgs.ProgressBar">
            <summary>
            進度元件.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISProgressEventArgs.Message">
            <summary>
            目前進度訊息, 由執行端設定.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISProgressEventArgs.Minimum">
            <summary>
            進度最小值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISProgressEventArgs.Maximum">
            <summary>
            進度最大值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISProgressEventArgs.Value">
            <summary>
            目前進度值.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISProgressEventArgs.Percentage">
            <summary>
            目前進度百分比.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISReplaceFlags">
            <summary>
            字串內容取代選項.
            </summary>
        </member>
        <member name="F:HIS.Systems.HISReplaceFlags.ReplaceAll">
            <summary>取代全部.</summary>
        </member>
        <member name="F:HIS.Systems.HISReplaceFlags.IgnoreCase">
            <summary>忽略大小寫.</summary>
        </member>
        <member name="T:HIS.Systems.HISMakeArrayOptions">
            <summary>
            MakeArray 選項.
            </summary>
            <remarks>可為複合選項.</remarks>
        </member>
        <member name="F:HIS.Systems.HISMakeArrayOptions.None">
            <summary>無.</summary>
        </member>
        <member name="F:HIS.Systems.HISMakeArrayOptions.EmptyValue">
            <summary>若無任何數值存在使用空數值(HISConst.SEmptyValue).</summary>
        </member>
        <member name="F:HIS.Systems.HISMakeArrayOptions.IgnoreDuplicate">
            <summary>忽略重覆數值.</summary>
        </member>
        <member name="T:HIS.Systems.HISSystem">
            <summary>
            HIS 系統函式類別.  
            </summary>
        </member>
        <member name="F:HIS.Systems.HISSystem.SRowToTableTag">
            <summary><b>僅內部使用.</b></summary>
        </member>
        <member name="F:HIS.Systems.HISSystem.SRowsToTableTag">
            <summary><b>僅內部使用.</b></summary>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsIntegerColumn(System.Data.DataColumn)">
            <summary>
            是否為整數欄位.
            </summary>
            <param name="AColumn">資料欄位物件.</param>
            <returns>若為 true 表示資料欄位物件為整數欄位, 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsDecimalColumn(System.Data.DataColumn)">
            <summary>
            是否為小數點數值欄位.
            </summary>
            <param name="AColumn">資料欄位.</param>
            <returns>若為 true 表示資料欄位物件為小數點數值欄位(decimal, double 等), 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsNumericColumn(System.Data.DataColumn)">
            <summary>
            是否為數字欄位.
            </summary>
            <param name="AColumn">資料欄位物件.</param>
            <returns>若為 true 表示資料欄位物件為數字欄位(int, decimal, double 等), 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.GetControlList(System.Windows.Forms.Control)">
            <summary>
            取得控制項之所有子控制項
            </summary>
            <param name="AOwner">尋找元件的父元件(Parent).</param>
            <returns>傳回指定控制項之所有子控制項.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.FindControl(System.Windows.Forms.Control,System.String)">
            <summary>
            尋找元件中符合元件名稱的元件.
            </summary>
            <param name="AOwner">尋找元件的父元件(Parent).</param>
            <param name="sControlName">元件名稱, 不區分大小寫.</param>
            <returns>符合元件名稱的元件(Control), 若不存在則傳回 null.</returns>
            <remarks>
            *視窗中應直接使用 <b>this.FindControl()</b> 方法而不用 HISSystem.FindControl().
            </remarks>
            <example>
            尋找元件 :
            <code>
            Control TextControl;
            //      
            TextControl = (TextBox)<b>this.FindControl(</b>Panel1, "TextBox1"<b>)</b>;
            if (TextControl == null)
              return;
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.FindControl(System.Windows.Forms.Control,System.String,System.Windows.Forms.Control)">
            <summary>
            尋找元件中符合元件名稱的元件.
            </summary>
            <param name="AOwner">尋找元件的父元件(Parent).</param>
            <param name="sControlName">元件名稱, 不區分大小寫.</param>
            <param name="ADefaultControl">替代元件, 即空元件, 應用於尋找元件不存在時程式使用空元件而不需進行額外元件為 null 與否的判斷.</param>
            <returns>符合元件名稱的元件(Control), 若不存在則傳回替代元件 - <i>ADefaultControl</i>.</returns>
            <remarks>
            此 overload 方法僅應用於特定情況, 非必要不應使用.
            <br/><br/>
            *視窗中應直接使用 <b>this.FindControl()</b> 方法而不用 HISSystem.FindControl() 方法.
            </remarks>
            <example>
            尋找元件, 若不存在則使用替代元件 :
            <code>
            Control TextControl;
            //      
            TextControl = (TextBox)<b>this.FindControl(</b>Panel1, "TextBox1", new TextBox()<b>)</b>;
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.FindControl(System.Windows.Forms.Control[],System.String)">
            <summary>
            尋找符合元件名稱的元件.
            </summary>
            <param name="Controls">元件陣列.</param>
            <param name="sControlName">元件名稱, 不區分大小寫.</param>
            <returns>符合元件名稱的元件.</returns>
            <remarks>
            此 overload 方法一般應用於大量尋找元件的情況, 執行效率較佳.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.FindContainerControl(System.Windows.Forms.Control)">
            <summary>
            讀取元件的 Container.
            </summary>
            <param name="AControl">元件.</param>
            <returns>元件的 Container, 包括 Form, UserControl 等.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.FindParent(System.Windows.Forms.Control,System.Type)">
            <summary>
            尋找指定型態的父元件.
            </summary>
            <param name="AControl">元件.</param>
            <param name="AType">父元件的元件型態.</param>
            <returns>若元件的父元件階層中存在指定型態的父元件則傳回該父元件, 否則傳回 null (如元件本身為 null 或指定型態的父元件不存在等).</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.Controls(System.Windows.Forms.Control)">
            <summary>
            讀取元件中所有的子元件.
            </summary>
            <param name="AOwner">父元件.</param>
            <returns>元件陣列.</returns>
            <remarks>
            <b>注意 : </b>讀取 .NET 元件的 Controls 屬性將僅包含該元件下的<b>第一層</b>子元件而非所有的子元件.
            <br/><br/>
            例如 :
            <br/><br/>
            Form1 子元件 : TextBox1, Panel1  <br/>
            Panel1 子元件 : CheckBox1
            <br/><br/>
            *.NET 中讀取 Form1.Controls 將僅取得 TextBox1, Panel1 而並不包含 Panel1 下的 CheckBox1.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Controls(System.Windows.Forms.Control,System.String)">
            <summary>
            讀取元件中所有的子元件.
            </summary>
            <param name="AOwner">父元件.</param>
            <param name="sPropertyNames">排序屬性.</param>
            <returns>元件陣列.</returns>
            <remarks>
            <b>注意 : </b>讀取 .NET 元件的 Controls 屬性將僅包含該元件下的<b>第一層</b>子元件而非所有的子元件.
            <br/><br/>
            例如 :
            <br/><br/>
            Form1 子元件 : TextBox1, Panel1  <br/>
            Panel1 子元件 : CheckBox1
            <br/><br/>
            *.NET 中讀取 Form1.Controls 將僅取得 TextBox1, Panel1 而並不包含 Panel1 下的 CheckBox1.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Controls(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            讀取元件的子元件.
            </summary>
            <param name="AOwner">父元件.</param>
            <param name="bRecursive">是否包含所有子元件.</param>
            <returns>元件陣列.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.Controls(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            讀取元件中所有的子元件.
            </summary>
            <param name="AOwner">父元件.</param>
            <param name="bRecursive">是否包含所有子元件.</param>
            <param name="bTabOrder">是否依元件的 TabOrder 排序.</param>
            <returns>元件陣列.</returns>
            <remarks>
            <b>注意 : </b>讀取 .NET 元件的 Controls 屬性將僅包含該元件下的<b>第一層</b>子元件而非所有的子元件.
            <br/><br/>
            例如 :
            <br/><br/>
            Form1 子元件 : TextBox1, Panel1  <br/>
            Panel1 子元件 : CheckBox1
            <br/><br/>
            讀取 Form1.Controls 將僅取得 TextBox1, Panel1 而並不包含 Panel1 下的 CheckBox1.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.CloneTable(System.Data.DataTable)">
            <summary>
            複製表格
            </summary>
            <param name="SourceTable">表格來源.</param>
            <returns>傳回複製的新表格.</returns>
            <example>
            <code>
            DataTable SourceTable, Result;
            
            SourceTable = this.DataObject.Tables["...."];
            Result = HISSystem.CloneTable(SourceTable);
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.CopyTable(System.Data.DataTable)">
            <summary>
            複製表格.
            </summary>
            <param name="SourceTable">來源表格.</param>
            <returns>資料表格的複本(Copy).</returns>
            <remarks><b>僅內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.CopyTable(System.Data.DataRow[])">
            <summary>
            複製表格.
            </summary>
            <param name="SourceRows">來源資料列.</param>
            <returns>
            來源資料列轉換後的資料表格; 若 <i>SourceRows.Length</i> 等於 0 則傳回空表格結構 - <b>new DataTable()</b>.
            </returns>
            <exception cref="T:System.Exception">來源資料列必須皆隸屬於同一表格物件, 否則將引發例外</exception>
            <remarks><b>僅內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.CopyTable(System.Data.DataTable,System.Data.DataRow[])">
            <summary>
            複製表格.
            </summary>
            <param name="SourceTable">來源資料表格.</param>
            <param name="SourceRows">來源資料列.</param>
            <returns>
            來源資料列轉換後的資料表格; 若 <i>SourceRows.Length</i> 等於 0 則傳回 <i>SourceTable</i> 的表格結構(無資料列).
            </returns>
            <exception cref="T:System.Exception">來源資料列必須皆隸屬於同一表格物件, 否則將引發例外</exception>
            <remarks><b>僅內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.CopyTable(System.Data.DataRow)">
            <summary>
            複製表格.
            </summary>
            <param name="SourceRow">來源資料列.</param>
            <returns>來源資料列轉換後的資料表格, 若 <i>SourceRow</i> 為 null 則傳回 null.</returns>
            <remarks><b>僅內部使用.</b></remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.CopyRow(System.Data.DataRow)">
            <summary>
            複製資料列.
            </summary>
            <param name="SourceRow">來源資料列.</param>
            <returns>來源資料列的資料列複本, 若 <i>SourceRow</i> 為 null 則傳回 null.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsLetter(System.Char)">
            <summary>
            英文字母檢查.
            </summary>
            <param name="Ch">來源字元.</param>
            <returns>若為 true 表示來源字元為英文字母符號(A~Z, a~z, 不分大小寫), 否則為 false.</returns>
            <example>
            <code>
            HISSystem.IsLetter(Ch);     
            </code>
            </example>  
        </member>
        <member name="M:HIS.Systems.HISSystem.IsDigit(System.Char)">
            <summary>
            數字檢查.
            </summary>
            <param name="Ch">來源字元.</param>
            <returns>若為 true 表示來源字元為數字符號(0~9), 否則為 false.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsDigit(System.String)">
            <summary>
            數字檢查.
            </summary>
            <param name="Value">來源字串.</param>
            <returns>若為 true 表示來源字串非空字串且皆為數字字元(0~9), 否則為 false.</returns>
            <remarks>
            本方法一般為程式碼使用, 若為元件輸入資料檢核應使用視窗元件屬性 - <b>CheckDataName</b>.
            </remarks>
            <example>
            <code>
            HISSystem.IsDigit(sValue);     
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsInteger(System.String)">
            <summary>
            整數數值檢查.
            </summary>
            <param name="Value">來源字串.</param>
            <returns>若為 true 表示來源字串內容為合法整數數值(int), 否則為 false.</returns>
            <remarks>
            本方法一般僅內部使用, 若為元件輸入資料檢核應使用視窗元件屬性 - <b>CheckDataName</b>.
            </remarks>
            <example>
            <code>
            HISSystem.IsInteger(sValue);     
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsNumeric(System.String)">
            <summary>
            數字數值檢查.
            </summary>
            <param name="Value">來源字串.</param>
            <returns>若為 true 表示來源字串內容為合法的數字數值(int, double, decimal), 否則為 false.</returns>
            <remarks>
            本方法一般僅內部使用, 若為元件輸入資料檢核應使用視窗元件屬性 - <b>CheckDataName</b>.
            </remarks>
            <example>
            <code>
            HISSystem.IsNumeric(sValue);     
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsLetterOrDigit(System.Char)">
            <summary>
            英/數字檢查.
            </summary>
            <param name="Ch">來源字元.</param>
            <returns>若為 true 表示來源字元為英文字母或數字(0~9, A~Z, a~z, 不分大小寫), 否則為 false.</returns>
            <example>
            <code>
            HISSystem.IsLetterOrDigit('.'); &lt;- 結果為 false
            HISSystem.IsLetterOrDigit('A'); &lt;- 結果為 true
            HISSystem.IsLetterOrDigit('0'); &lt;- 結果為 true
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsAlphanumeric(System.String)">
            <summary>
            是否為文/數字.
            </summary>
            <param name="Value">來源字串.</param>
            <returns>若為 true 表示來源字串內容皆為英文字母/數字符號(0~9, A~Z, a~z, 不分大小寫), 否則為 false.</returns>
            <remarks>
            本方法一般僅內部使用, 若為元件輸入資料檢核應使用視窗元件屬性 - <b>CheckDataName</b>.
            </remarks>
            <example>
            <code>
            HISSystem.IsAlphanumeric(sValue);     
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsAcceptableASCII(System.Char)">
            <summary>
            可接受輸入的字元.
            </summary>
            <param name="Ch">來源字元.</param>
            <returns>
            若為 true 表示來源字元為可接受輸入的字元, 否則為 false.
            </returns>
            <remarks>
            目前可接受輸入的字元為 ' '(32) 至 '~'(126).
            <br/><br/>
            *應用於檢核 MedNo, ChartNo 等混合字元欄位數值.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsAcceptableASCII(System.String)">
            <summary>
            可接受輸入的字元.
            </summary>
            <param name="Value">來源字串.</param>
            <returns>
            若為 true 表示來源字串的所有字元為可接受輸入的字元, 否則為 false.
            </returns>
            <remarks>
            目前可接受輸入的字元為 ' '(32) 至 '~'(126).
            <br/><br/>
            *應用於檢核 MedNo, ChartNo 等混合字元欄位數值.
            </remarks>
            <example>
            <code>
            Result = HISSystem.IsAcceptableASCII(sValue);     
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.EmptyTo(System.Object,System.Object)">
            <summary>
            空數值轉換.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>來源數值, 若來源數值為空白(Trim)則傳回替換數值.</returns>
            <remarks>此方法一般應用於<b>字串</b>處理.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.NullTo(System.Object,System.Object)">
            <summary>
            空物件轉換.
            </summary>
            <param name="Value">來源物件.</param>
            <param name="AlternateValue">替換物件.</param>
            <returns>來源物件, 若來源物件為 null 則傳回替換物件.</returns>
            <remarks>此方法一般應用於<b>物件</b>處理.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.EmptyTo(System.Object,System.String)">
            <summary>
            空值轉換.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>轉換數值(來源數值或替換數值), 若來源數值為空值(null, DBNull, Trim 為 "")則傳回替換數值.</returns>
            <example>
            <code>
            string sTime;
            //
            sTime = HISSystem.EmptyTo(ARow[<i>ColumnName</i>], sDefaultTime);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.EmptyTo(System.Object,System.String[])">
            <summary>
            空值轉換.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="AlternateValues">替換數值(陣列).</param>
            <returns>轉換數值(來源數值或替換數值), 若來源數值為空值(null, DBNull, Trim 為 "")則依序傳回替換數值.</returns>
            <remarks>
            替換數值(陣列), 假設替換數值陣列長度為 2, 若<b>來源數值</b>為空值則傳回<b>第一個替換數值</b>(<i>AlternateValues[0]</i>), 
            若第一個替換數值仍為空值則傳回<b>第二個替換數值</b>(<i>AlternateValues[1]</i>), 其餘依此類推.
            <br/><br/>
            *因替換數值(陣列)中各數值皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用, 如 :
            <code>
            ...
            if (...)
              ...;
            if (...)
              ...;
            </code>
            </remarks>
            <example>
            <code>
            string sTime;
            //
            sTime = HISSystem.EmptyTo(ARow[<i>ColumnName</i>], new string[] {sDefaultTime, HISDateTime.TimeString()}); 
            ...
            </code>
            原寫法 :
            <code>
            string sTime;
            //
            sTime = ARow[<i>ColumnName</i>].ToString();
            if (sTime.Trim() == "")
              sTime = sDefaultTime;
            if (sTime.Trim() == "")
              sTime = HISDateTime.TimeString();
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.EmptyTo(System.String,System.String)">
            <summary>
            空值轉換.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="AlternateValue">替換數值.</param>
            <returns>轉換數值(來源數值或替換數值), 若來源數值為空值(null, DBNull, Trim 為 "")則傳回替換數值.</returns>
            <example>
            <code>
            string sTime;
            //
            sTime = HISSystem.EmptyTo(sTime, sDefaultTime);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.EmptyTo(System.String,System.String[])">
            <summary>
            空值轉換.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="AlternateValues">替換數值(陣列).</param>
            <returns>轉換數值(來源數值或替換數值), 若來源數值為空值(null, DBNull, Trim 為 "")則依序傳回替換數值.</returns>
            <remarks>
            替換數值(陣列), 假設替換數值陣列長度為 2, 若<b>來源數值</b>為空值則傳回<b>第一個替換數值</b>(<i>AlternateValues[0]</i>), 
            若第一個替換數值仍為空值則傳回<b>第二個替換數值</b>(<i>AlternateValues[1]</i>), 其餘依此類推.
            <br/><br/>
            *因替換數值(陣列)中各數值皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用, 如 :
            <code>
            ...
            if (...)
              ...;
            if (...)
              ...;
            </code>
            </remarks>
            <example>
            <code>
            string sTime;
            //
            sTime = HISSystem.EmptyTo(TimeText.Text, new string[] {sDefaultTime, HISDateTime.TimeString()}); 
            ...
            </code>
            原寫法 :
            <code>
            string sTime;
            //
            sTime = this.Text;
            if (sTime.Trim() == "")
              sTime = sDefaultTime;
            if (sTime.Trim() == "")
              sTime = HISDateTime.TimeString();
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Copy(System.String,System.Int32)">
            <summary>
            複製字串.
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="iStartIndex">起始索引(<b>one-based</b>), 不同於 .NET 內建字串方法 Substring() 由 0 開始算起(zero-based).</param>
            <returns>傳回起始索引開始的所有字串內容.</returns>
            <remarks>.NET 不同於 Win32, .NET 環境中一個中文字仍算一個字元, 若欲以 Ansi 方式複製字串應使用 LeftStr/RightStr 等方法.</remarks>
            <example>
            <code>
            string sValue;
            //
            sValue = HISSystem.Copy("ABCDE", 1); &lt;- 結果為 ABCDE
            sValue = HISSystem.Copy("ABCDE", 4); &lt;- 結果為 DE
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Copy(System.String,System.Int32,System.Int32)">
            <summary>
            複製字串.
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="iStartIndex">起始索引(<b>one-based</b>), 不同於 .NET 內建字串方法 Substring() 由 0 開始算起(zero-based).</param>
            <param name="iLength">複製的字元個數.</param>
            <returns>傳回 <i>iStartIndex</i> 開始長度為 <i>iLength</i> 的字串, 若不足則傳回實際長度的字串.</returns>
            <remarks>
            複製字串時請一律使用 HISSystem.Copy() 方法.
            <br/><br/>
            *非必要請勿使用 .NET 字串的 Substring() 方法, 因為 Substring() 方法在 <i>startIndex</i> 或 <i>length</i> 等參數數值超出範圍時皆將引發例外. 
            反之, HISSystem.Copy() 為傳回空字串("").
            </remarks>
            <example>
            <code>
            string sValue;
            //
            sValue = HISSystem.Copy("ABCDE", 1, 3); &lt;- 結果為 ABC
            sValue = HISSystem.Copy("ABCDE", 2, 1); &lt;- 結果為 B
            sValue = HISSystem.Copy("ABCDE", 6, 1); &lt;- 結果為空字串("")
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Copy(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            複製字串.
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="iStartIndex">起始索引(<b>one-based</b>), 不同於 .NET 內建字串方法 Substring() 由 0 開始算起(zero-based).</param>
            <param name="iLength">複製的字元個數.</param>
            <param name="sAlternateValue">替代字串.</param>
            <returns>傳回 <i>iStartIndex</i> 開始長度為 <i>iLength</i> 的字串, 若不足則傳回實際長度的字串, 若結果空白則傳回指定指代字串.</returns>
            <remarks>
            複製字串時請一律使用 HISSystem.Copy() 方法.
            <br/><br/>
            *非必要請勿使用 .NET 字串的 Substring() 方法, 因為 Substring() 方法在 <i>startIndex</i> 或 <i>length</i> 等參數數值超出範圍時皆將引發例外. 
            反之, HISSystem.Copy() 為傳回替代字串.
            </remarks>
            <example>
            <code>
            string sValue;
            //
            sValue = HISSystem.Copy("ABCDE", 1, 3); &lt;- 結果為 ABC
            sValue = HISSystem.Copy("ABCDE", 6, 1, "X"); &lt;- 結果為 X
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Pos(System.String,System.String)">
            <summary>
            子字串位置.
            </summary>
            <param name="sSubstring">子字串.</param>
            <param name="sSource">來源字串.</param>
            <returns>子字串存在於來源字串的第一個位置(<b>1 based</b>), 若子字串為空字串("")或不存在於來源字串將傳回 0.</returns>
            <example>
            <code>
            iPos = HISSystem.Pos("5", "123455"); &lt;- 結果為 5
            iPos = HISSystem.Pos("A", "123455"); &lt;- 結果為 0
            iPos = HISSystem.Pos("", "123455"); &lt;- 結果為 0
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISSystem.Delete(System.String@,System.Int32)">
            <summary>
            刪除字串內容.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iIndex">刪除開始位置(<b>1 based</b>).</param>
            <remarks>
            刪除字串內容, 刪除開始位置(含)以後的全部字串內容.
            <br/><br/>
            <i>iIndex</i> &lt;= 0, <i>iIndex &gt; Value.Length</i> 等情況將不執行任何動作, 且此方法若遇字串長度不足, 索引超出範圍等不引發任何例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Delete(System.String@,System.Int32,System.Int32)">
            <summary>
            刪除字串內容.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iIndex">刪除開始位置(<b>1 based</b>).</param>
            <param name="iCount">刪除字元個數.</param>
            <remarks>
            刪除字串內容, 刪除開始位置(含)以後的刪除字元個數的字串內容.
            <br/><br/>
            <i>iIndex</i> &lt;= 0, <i>iCount</i> &lt;= 0, <i>iIndex &gt; Value.Length</i> 等情況將不執行任何動作, 且此方法若遇字串長度不足, 索引超出範圍等不引發任何例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Delete(System.String@,System.Int32,System.String@)">
            <summary>
            刪除字串內容並回傳移除字串.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iIndex">刪除開始位置(<b>1 based</b>).</param>
            <param name="sDelete">移除字串內容.</param>
            <remarks>
            刪除開始位置(含)以後的全部字串內容, 並回傳被刪除的字串內容.
            <br/><br/>
            <i>iIndex</i> &lt;= 0, <i>iCount</i> &lt;= 0, <i>iIndex &gt; Value.Length</i> 等情況將不執行任何動作, 且此方法若遇字串長度不足, 索引超出範圍等不引發任何例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Delete(System.String@,System.Int32,System.Int32,System.String@)">
            <summary>
            刪除字串內容並回傳移除字串.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iIndex">刪除開始位置(<b>1 based</b>).</param>
            <param name="iCount">刪除字元個數.</param>
            <param name="sDelete">移除字串內容.</param>
            <remarks>
            刪除開始位置(含)以後的刪除字元個數的字串內容, 並回傳被刪除的字串內容.
            <br/><br/>
            <i>iIndex</i> &lt;= 0, <i>iCount</i> &lt;= 0, <i>iIndex &gt; Value.Length</i> 等情況將不執行任何動作, 且此方法若遇字串長度不足, 索引超出範圍等不引發任何例外.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Object[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(System.Object[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.String[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(string[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為空字串("").
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Int32[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(int[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 0.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Data.DataRow[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(DataRow[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Data.DataColumn[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(DataColumn[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(HIS.Systems.HISFileInfo[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(HISFileInfo[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Windows.Forms.Control[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Windows.Forms.MenuItem[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Windows.Forms.DataGridColumnStyle[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(DataGrid[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SetLength(System.Windows.Forms.DataGrid[]@,System.Int32)">
            <summary>
            動態陣列長度.
            </summary>
            <param name="Values">來源陣列(DataGrid[]).</param>
            <param name="iNewLength">陣列長度.</param>
            <remarks>
            動態陣列長度 :
            <br/><br/>
            若 <i>iNewLength</i> 大於或等於來源陣列的長度則來源陣列內容將保留不變. <br/>
            若 <i>iNewLength</i> 小於來源陣列的長度則來源陣列內容將僅保留 <i>iNewLength</i> 個(0 ~ <b>iNewLength</b> - 1).
            <br/><br/>
            新陣列元素初值為 null.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            找出 0 ~ 9 中的偶數並儲存於動態陣列 :
            <code>
            int[] Numbers = {};
            //
            for (int I = 0; I &lt; 10; I++)
            {
              if ((I % 2) != 0)
                continue;
              HISSystem.SetLength(ref Numbers, Numbers.Length + 1);
              Numbers[Numbers.Length - 1] = I;
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IncLength(System.Object[]@,System.Object)">
            <summary>
            增加陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="Value">新增數值.</param>
            <remarks>
            增加陣列長度, 來源陣列長度將自動 + 1 並填入新增數值至新增的陣列索引位置.
            <br/><br/>
            此方法適用於循序式的動態陣列, 簡化動態陣列建立程序.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            <code>
            int[] Result = {};
            //
            foreach (...)
            {
              ...
              HISSystem.IncLength(ref Result, NewValue);
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IncLength(System.Windows.Forms.Control[]@,System.Windows.Forms.Control)">
            <summary>
            增加陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="Value">新增數值.</param>
            <remarks>
            增加陣列長度, 來源陣列長度將自動 + 1 並填入新增數值至新增的陣列索引位置.
            <br/><br/>
            此方法適用於循序式的動態陣列, 簡化動態陣列建立程序.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            <code>
            int[] Result = {};
            //
            foreach (...)
            {
              ...
              HISSystem.IncLength(ref Result, NewValue);
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IncLength(System.String[]@,System.String)">
            <summary>
            增加陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="Value">新增數值.</param>
            <remarks>
            增加陣列長度, 來源陣列長度將自動 + 1 並填入新增數值至新增的陣列索引位置.
            <br/><br/>
            此方法適用於循序式的動態陣列, 簡化動態陣列建立程序.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            <code>
            int[] Result = {};
            //
            foreach (...)
            {
              ...
              HISSystem.IncLength(ref Result, NewValue);
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IncLength(System.Windows.Forms.MenuItem[]@,System.Windows.Forms.MenuItem)">
            <summary>
            增加陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="Value">新增數值.</param>
            <remarks>
            增加陣列長度, 來源陣列長度將自動 + 1 並填入新增數值至新增的陣列索引位置.
            <br/><br/>
            此方法適用於循序式的動態陣列, 簡化動態陣列建立程序.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            <code>
            int[] Result = {};
            //
            foreach (...)
            {
              ...
              HISSystem.IncLength(ref Result, NewValue);
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IncLength(System.Data.DataRow[]@,System.Data.DataRow)">
            <summary>
            增加陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="Value">新增數值.</param>
            <remarks>
            增加陣列長度, 來源陣列長度將自動 + 1 並填入新增數值至新增的陣列索引位置.
            <br/><br/>
            此方法適用於循序式的動態陣列, 簡化動態陣列建立程序.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            <code>
            int[] Result = {};
            //
            foreach (...)
            {
              ...
              HISSystem.IncLength(ref Result, NewValue);
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IncLength(System.Int32[]@,System.Int32)">
            <summary>
            增加陣列長度.
            </summary>
            <param name="Values">來源陣列.</param>
            <param name="Value">新增數值.</param>
            <remarks>
            增加陣列長度, 來源陣列長度將自動 + 1 並填入新增數值至新增的陣列索引位置.
            <br/><br/>
            此方法適用於循序式的動態陣列, 簡化動態陣列建立程序.
            <br/><br/>
            *注意 : 若迴圈次數較多(> 500)或共用函式內請改用 Generic(泛型) 方式實作, 以避免影響執行效能.
            </remarks>
            <example>
            <code>
            int[] Result = {};
            //
            foreach (...)
            {
              ...
              HISSystem.IncLength(ref Result, NewValue);
            }
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.MakeArray(System.Data.DataRow[],System.String)">
            <summary>
            建立欄位值陣列.
            </summary>
            <param name="Rows">資料列.</param>
            <param name="sColumnNames">欄位名稱, 如 'Column1', 'Column1, Column2' 等, 若第一個欄位不存在將使用第二欄位.</param>
            <exception cref="T:System.Exception">若資料列中包含刪除資料列(DataRowState.Deleted)將引發例外.</exception>
            <returns>欄位值陣列.</returns>
            <remarks>方法將忽略空白欄位值(Trim).</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.MakeArray(System.Data.DataRow[],System.String,HIS.Systems.HISMakeArrayOptions)">
            <summary>
            建立欄位值陣列.
            </summary>
            <param name="Rows">資料列.</param>
            <param name="sColumnNames">欄位名稱, 如 'Column1', 'Column1, Column2' 等, 若第一個欄位不存在將使用第二欄位.</param>
            <param name="MakeArrayOptions">選項.</param>
            <exception cref="T:System.Exception">若資料列中包含刪除資料列(DataRowState.Deleted)將引發例外.</exception>
            <returns>欄位值陣列.</returns>
            <remarks>方法將忽略空白欄位值(Trim).</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Round(System.Object)">
            <summary>
            四捨五入.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>四捨五入後的<b>整數</b>數值(不論小數位數奇/偶皆進位).</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.8  => -3  <br/>
             2.8  =>  3  <br/>
             1.8  =>  2  <br/>
             1.45 =>  1  <br/>
                         <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Round(System.Decimal)">
            <summary>
            四捨五入.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>四捨五入後的<b>整數</b>數值(不論小數位數奇/偶皆進位).</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.8  => -3  <br/>
             2.8  =>  3  <br/>
             1.8  =>  2  <br/>
             1.45 =>  1  <br/>
                         <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Round(System.Object,System.Int32)">
            <summary>
            四捨五入.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iDecimal">保留的小數點位數.</param>
            <returns>四捨五入後的數值, 保留指定的小數點位數(不論小數位數奇/偶皆進位).</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.859 (iDecimal = 2) => -2.86  <br/>
             2.859 (iDecimal = 2) =>  2.86  <br/>
             1.84  (iDecimal = 1) =>  1.8   <br/>
                                            <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Round(System.Decimal,System.Int32)">
            <summary>
            四捨五入.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iDecimal">保留的小數點位數.</param>
            <returns>四捨五入後的數值, 保留指定的小數點位數(不論小數位數奇/偶皆進位).</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.859 (iDecimal = 2) => -2.86  <br/>
             2.859 (iDecimal = 2) =>  2.86  <br/>
             1.84  (iDecimal = 1) =>  1.8   <br/>
                                            <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.RoundAbs(System.Object)">
            <summary>
            無條件進位.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>無條件進位後的數值, 小數點無條件進位(Round absolutely).</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.85 => -3  <br/>
             2.85 =>  3  <br/>
             1.4  =>  2  <br/>
                         <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.RoundAbs(System.Decimal)">
            <summary>
            無條件進位.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>無條件進位後的數值, 小數點無條件進位(Round absolutely).</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.85 => -3  <br/>
             2.85 =>  3  <br/>
             1.4  =>  2  <br/>
                         <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Trunc(System.Object)">
            <summary>
            小數點無條件捨去.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>浮點數小數點無條件捨去後的數值.</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.859 -> -2  <br/>
            2.859 -> 2    <br/>
            1.84 => 1     <br/>
                          <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Trunc(System.Object,System.Int32)">
            <summary>
            小數點無條件捨去.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iDecimal">保留的小數點位數.</param>
            <returns>浮點數小數點無條件捨去後的數值, 可指定保留的小數點位數.</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.859 (iDecimal = 2) -> -2.85  <br/>
            2.859  (iDecimal = 2) -> 2.85   <br/>
            1.84   (iDecimal = 1) => 1.8    <br/>
                                           <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Trunc(System.Decimal)">
            <summary>
            小數點無條件捨去.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>浮點數小數點無條件捨去後的數值.</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.859 -> -2  <br/>
            2.859 -> 2    <br/>
            1.84 => 1     <br/>
                          <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Trunc(System.Decimal,System.Int32)">
            <summary>
            小數點無條件捨去.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iDecimal">保留的小數點位數.</param>
            <returns>浮點數小數點無條件捨去後的數值, 可指定保留的小數點位數.</returns>
            <remarks>
            計算結果示範 :    
            <br/><br/>                    
            -2.859 (Decimal = 2) -> -2.85  <br/>
            2.859  (Decimal = 2) -> 2.85   <br/>
            1.84   (Decimal = 1) => 1.8    <br/>
                                           <br/>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.Frac(System.Decimal)">
            <summary>
            讀取浮點數的小數點位數.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>浮點數的小數點位數.</returns>
            <example>
            <code>
            decimal dValue;
            //
            dValue = HISSystem.Frac(5.25m); &lt;- 5
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Length(System.String)">
            <summary>
            字串長度(Ansi).
            </summary>
            <param name="sSource">來源字串.</param>
            <returns>來源字串的字串長度(Ansi), 一個中文字長度為 2.</returns>
            <remarks>非必要一般應使用 .NET 字串方法, 如 sSource.Length 等.</remarks>
            <example>
            <code>
            string sValue = "難";
            int iLength;
            //
            iLength = sValue.Length; &lt;- 長度為 1 (Unicode)
            iLength = HISSystem.Length(sValue); &lt;- 長度為 2 (Ansi)
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.LeftStr(System.Object,System.Int32)">
            <summary>
            讀取左方字串.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iCount">讀取字元個數(Bytes).</param>
            <returns>傳回字串左方算起 iCount 個字元的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.LeftStr(System.String,System.Int32)">
            <summary>
            讀取左方字串.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iCount">讀取字元個數(Bytes).</param>
            <returns>傳回字串左方算起 iCount 個字元的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.RightStr(System.Object,System.Int32)">
            <summary>
            讀取右方字串.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iCount">讀取字元個數(Bytes).</param>
            <returns>傳回字串右方算起 iCount 個字元的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.RightStr(System.String,System.Int32)">
            <summary>
            讀取右方字串.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iCount">讀取字元個數(Bytes).</param>
            <returns>傳回字串右方算起 iCount 個字元的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadLeft(System.Object,System.Int32)">
            <summary>
            補足左方字元.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <returns>傳回來源字串以<b>空白字元(' ')</b>補足左方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadLeft(System.Object,System.Int32,System.Char)">
            <summary>
            補足左方字元.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <param name="PaddingChar">補足字元.</param>
            <returns>傳回來源字串以<b>補足字元</b>補足左方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadLeft(System.String,System.Int32)">
            <summary>
            補足左方字元.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <returns>傳回來源字串以<b>空白字元(' ')</b>補足左方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadLeft(System.String,System.Int32,System.Char)">
            <summary>
            補足左方字元.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <param name="PaddingChar">補足字元.</param>
            <returns>傳回來源字串以<b>補足字元</b>補足左方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadRight(System.Object,System.Int32)">
            <summary>
            補足右方字元.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <returns>傳回來源字串以<b>空白字元(' ')</b>補足右方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadRight(System.Object,System.Int32,System.Char)">
            <summary>
            補足右方字元.
            </summary>
            <param name="Value">來源數值.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <param name="PaddingChar">補足字元.</param>
            <returns>傳回來源字串以<b>補足字元</b>補足右方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadRight(System.String,System.Int32)">
            <summary>
            補足右方字元.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <returns>傳回來源字串以<b>空白字元(' ')</b>補足右方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.PadRight(System.String,System.Int32,System.Char)">
            <summary>
            補足右方字元.
            </summary>
            <param name="Value">來源字串.</param>
            <param name="iTotalWidth">補足長度(單位 : Bytes).</param>
            <param name="PaddingChar">補足字元.</param>
            <returns>傳回來源字串以<b>補足字元</b>補足右方至最大長度的字串結果.</returns>
            <remarks>本方法為 <b>Ansi</b> 版本, 不同於 .NET 內建方法為 Unicode 版本.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.ReplaceString(System.String,System.String,System.String)">
            <summary>
            取代字串.
            </summary>
            <param name="SourceValue">來源字串.</param>
            <param name="OldValue">原有字串.</param>
            <param name="NewValue">替代字串.</param>
            <returns>傳回字串中原有字串以替代字串取代後的字串結果.</returns>
            <remarks>字串取代時<b>取代全部</b>且<b>忽略大小寫</b>.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.ReplaceString(System.String,System.String,System.String,HIS.Systems.HISReplaceFlags)">
            <summary>
            取代字串.
            </summary>
            <param name="SourceValue">來源字串.</param>
            <param name="OldValue">原有字串.</param>
            <param name="NewValue">替代字串.</param>
            <param name="ReplaceFlags">字串取代選項.</param>
            <returns>傳回字串中原有字串以替代字串取代後的字串結果.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.TrimStart(System.String,System.Char[],System.String)">
            <summary>
            前字串為空字串則傳回替代字串
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="TrimChars">來源字串中的字元.</param>
            <param name="sAlt">傳代替字串.</param>
            <returns>傳回 TrimStart 結果, 若傳回數值為空字串則回傳代替字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.TrimEnd(System.String,System.Char[],System.String)">
            <summary>
            後字串為空字串則傳回替代字串 
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="TrimChars">來源字串中的字元.</param>
            <param name="sAlt">傳代替字串.</param>
            <returns>傳回 TrimEnd 結果, 若傳回數值為空字串則回傳代替字串.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.QuotedStr(System.Object)">
            <summary>
            數值置於<b>單引號(')</b>內.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>傳回數值以單引號括起來後的字串, 如 'Value' 等.</returns>
            <example>
            <code>
            string sValue;
            //
            sValue = HISSystem.QuotedStr(Value);
            ...
            </code>
            </example>  
        </member>
        <member name="M:HIS.Systems.HISSystem.QuotedStr(System.String)">
            <summary>
            數值置於<b>單引號(')</b>內.
            </summary>
            <param name="S">來源字串.</param>
            <returns>傳回數值以單引號括起來後的字串, 如 'Value' 等.</returns>
            <example>
            <code>
            string sValue;
            //
            sValue = HISSystem.QuotedStr(Value);
            ...
            </code>
            </example>  
        </member>
        <member name="M:HIS.Systems.HISSystem.QuotedStr(System.String,System.Char)">
            <summary>
            數值置於<b>引號符號</b>內.
            </summary>
            <param name="S">來源字串.</param>
            <param name="QuoteChar">引號符號.</param>
            <returns>傳回數值以引號符號括起來後的字串, 如 'Value', "Value" 等.</returns>
            <example>
            <code>
            string sValue;
            //
            sValue = HISSystem.QuotedStr(Value, '"');
            ...
            </code>
            </example>  
        </member>
        <member name="M:HIS.Systems.HISSystem.Split(System.String,System.Char[])">
            <summary>
            字串切割.
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="separator">分隔字元, 為字串切割的依據.</param>
            <returns>切割後字串陣列.</returns>
            <remarks>
            本方法功能同 .NET 字串 Split() 方法, 差別在於字串陣列結果皆將執行 Trim() 方法以去除陣列元素數值
            不必要的前/後空白字元.
            </remarks>
            <example>
            <code>
            string[] ColumnNames;
            string sColumnNames = "Column1, Column2, Column3";
            //
            ColumnNames = HISSystem.Split(sColumnNames, ','); &lt;- ColumnNames = {"Column1", "Column2", "Column3"}
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.SplitString(System.String,System.String,System.Boolean)">
            <summary>
            字串分段.
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="sSeparator">分隔字串, 為字串分段的依據.</param>
            <param name="bReturnSeparator">字串分段結果是否包括分隔字串.</param>
            <returns>傳回分段後的字串陣列.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.SplitString(System.String,System.String)">
            <summary>
            字串分段.
            </summary>
            <param name="sSource">來源字串.</param>
            <param name="sSeparator">分隔字串, 為字串分段的依據.</param>
            <returns>傳回分段後的字串陣列.</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.WrapLines(System.Windows.Forms.TextBoxBase,System.Int32)">
            <summary>
            讀取自動換行的文字行.
            </summary>
            <param name="AText">來源字串.</param>
            <param name="iCharsPerLine">每行文字長度(字元個數).</param>
            <returns>傳回自動換行後的文字行(模擬 WordWrap 功能).</returns>
        </member>
        <member name="M:HIS.Systems.HISSystem.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            讀取文字的繪製寬度.
            </summary>
            <param name="g">繪製物件.</param>
            <param name="sText">繪製文字內容.</param>
            <param name="AFont">繪製字型.</param>
            <returns>文字的繪製寬度, 依據文字內容, 字型[名稱, 大小]等, 寬度無條件四捨五入.</returns>
            <remarks>*.NET Graphics.MeasureString() 方法一般傳回 SizeF 的值皆為含小數點的數值.</remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.ToFlag(System.Boolean)">
            <summary>
            Y/N 數值轉換.
            </summary>
            <param name="Value">Boolean 數值.</param>
            <returns>若 Value 為 true 則傳回 Y, 否則傳回 N.</returns>
            <example>
            <code>
            string sValue;
            bool Value = true; 
            //
            sValue = HISSystem.ToFlag(Value); &lt;- 結果為 Y     
            ...
            </code>
            </example> 
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean,System.Object,System.Object)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Value">Boolean 數值(true/false).</param>
            <param name="TrueValue">true 對應數值.</param>
            <param name="FalseValue">false 對應數值.</param>
            <returns>若 Value 為 true 則傳回 TrueValue 數值, 否則傳回 FalseValue 數值.</returns>
            <remarks>
            因 TrueValue/FalseValue 等參數皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用 :
            <br/><br/>
            <code>
            if (...)
              ...;
            else
              ...;
            </code>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean,System.String,System.String)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Value">Boolean 數值(true/false).</param>
            <param name="TrueValue">true 對應數值.</param>
            <param name="FalseValue">false 對應數值.</param>
            <returns>若 Value 為 true 則傳回 TrueValue 數值, 否則傳回 FalseValue 數值.</returns>
            <remarks>
            因 TrueValue/FalseValue 等參數皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用 :
            <br/><br/>
            <code>
            if (...)
              ...;
            else
              ...;
            </code>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Value">Boolean 數值(true/false).</param>
            <param name="TrueValue">true 對應數值.</param>
            <param name="FalseValue">false 對應數值.</param>
            <returns>若 Value 為 true 則傳回 TrueValue 數值, 否則傳回 FalseValue 數值.</returns>
            <remarks>
            因 TrueValue/FalseValue 等參數皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用 :
            <br/><br/>
            <code>
            if (...)
              ...;
            else
              ...;
            </code>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean,System.Decimal,System.Decimal)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Value">Boolean 數值(true/false).</param>
            <param name="TrueValue">true 對應數值.</param>
            <param name="FalseValue">false 對應數值.</param>
            <returns>若 Value 為 true 則傳回 TrueValue 數值, 否則傳回 FalseValue 數值.</returns>
            <remarks>
            因 TrueValue/FalseValue 等參數皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用 :
            <br/><br/>
            <code>
            if (...)
              ...;
            else
              ...;
            </code>
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean,System.Int32,System.Int32)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Value">Boolean 數值(true/false).</param>
            <param name="TrueValue">true 對應數值.</param>
            <param name="FalseValue">false 對應數值.</param>
            <returns>若 Value 為 true 則傳回 TrueValue 數值, 否則傳回 FalseValue 數值.</returns>
            <remarks>
            因 TrueValue/FalseValue 等參數皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用 :
            <br/><br/>
            <code>
            if (...)
              ...;
            else
              ...;
            </code>
            </remarks>
            <example>
            <code>
            int iOrderProgress = -1;
            //
            iOrderProgress = HISSystem.IfThen(CheckInRadio.Checked, HISConst.ORDERPROGRESS_Sign, iOrderProgress);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Value">Boolean 數值(true/false).</param>
            <param name="TrueValue">true 對應數值.</param>
            <param name="FalseValue">false 對應數值.</param>
            <returns>若 Value 為 true 則傳回 TrueValue 數值, 否則傳回 FalseValue 數值.</returns>
            <remarks>
            因 TrueValue/FalseValue 等參數皆為數值結果, 因此若數值結果執行時可能較耗時者應仍使用原始寫法, 以避免不必要的程式資源耗用 :
            <br/><br/>
            <code>
            if (...)
              ...;
            else
              ...;
            </code>
            </remarks>
            <example>
            <code>
            bool bNewRow;
            //
            bNewRow = HISSystem.IfThen(iRowNo == iRowsPerLine, LeftPivotLabel.Left, RightivotLabel.Left);
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean[],System.Object[],System.Object)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Values">布林值.</param>
            <param name="TrueValues">true 數值.</param>
            <param name="FalseValue">false 數值.</param>
            <returns>若布林值其一為 true 則傳回對應位置 true 數值, 否則傳回 false 數值.</returns>
            <exception cref="T:System.Exception">若布林值與 true 數值個數不一致將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean[],System.Object[],System.String)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Values">布林值.</param>
            <param name="TrueValues">true 數值.</param>
            <param name="FalseValue">false 數值.</param>
            <returns>若布林值其一為 true 則傳回對應位置 true 數值, 否則傳回 false 數值.</returns>
            <exception cref="T:System.Exception">若布林值與 true 數值個數不一致將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Boolean[],System.Object[],System.Int32)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="Values">布林值.</param>
            <param name="TrueValues">true 數值.</param>
            <param name="FalseValue">false 數值.</param>
            <returns>若布林值其一為 true 則傳回對應位置 true 數值, 否則傳回 false 數值.</returns>
            <exception cref="T:System.Exception">若布林值與 true 數值個數不一致將引發例外.</exception>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Object[],System.Object)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="ConditionValues">布林值/true 數值.</param>
            <param name="FalseValue">false 數值.</param>
            <returns>若布林值其一為 true 則傳回對應位置 true 數值, 否則傳回 false 數值.</returns>
            <exception cref="T:System.Exception">若布林值/true 數值個數不是偶數, 布林值型態非 bool, 布林值為 null 等將引發例外.</exception>
            <example>
            若條件判斷其一為 true 則傳回對應位置 true 數值, 否則傳回預設值(FalseValue) :
            <code>
            Color NewkColor;
            //
            NewkColor = (Color)HISSystem.IfThen(new object[] {
              (sValue == <i>value1</i>), Color.White, (sValue == <i>value2</i>), Color.Yellow,
              (sValue == <i>value3</i>), Color.Orange, (sValue == <i>value4</i>), Color.Red},
              SystemColors.Control);
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Object[],System.String)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="ConditionValues">布林值/true 數值.</param>
            <param name="FalseValue">false 數值.</param>
            <returns>若布林值其一為 true 則傳回對應位置 true 數值, 否則傳回 false 數值.</returns>
            <exception cref="T:System.Exception">若布林值/true 數值個數不是偶數, 布林值型態非 bool, 布林值為 null 等將引發例外.</exception>
            <example>
            若條件判斷其一為 true 則傳回對應位置 true 數值, 否則傳回預設值(FalseValue) :
            <code>
            string sNewValue;
            //
            sNewValue = HISSystem.IfThen(new object[] {
              (sValue == <i>value1</i>), "<i>value</i>", (sValue == <i>value2</i>), "<i>value</i>",
              (sValue == <i>value3</i>), "<i>value</i>", (sValue == <i>value4</i>), "<i>value</i>"},
              "<i>default value</i>");
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.IfThen(System.Object[],System.Int32)">
            <summary>
            true/false 數值轉換.
            </summary>
            <param name="ConditionValues">布林值/true 數值.</param>
            <param name="FalseValue">false 數值.</param>
            <returns>若布林值其一為 true 則傳回對應位置 true 數值, 否則傳回 false 數值.</returns>
            <exception cref="T:System.Exception">若布林值/true 數值個數不是偶數, 布林值型態非 bool, 布林值為 null 等將引發例外.</exception>
            <example>
            若條件判斷其一為 true 則傳回對應位置 true 數值, 否則傳回預設值(FalseValue) :
            <code>
            string sNewValue;
            //
            sNewValue = HISSystem.IfThen(new object[] {
              (sValue == <i>value1</i>), <i>value</i>, (sValue == <i>value2</i>), <i>value</i>,
              (sValue == <i>value3</i>), <i>value</i>, (sValue == <i>value4</i>), <i>value</i>},
              <i>0</i>);
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Ceiling(System.Object)">
            <summary>
            最小數值.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>大於或等於來源數值的最小數值.</returns>
            <remarks>  
            若來源數值含小數點 - 來源數值為正數則為整數位數 + 1, 來源數值為負數則忽略小數點.
            <br/><br/>
            結果值皆無小數點.
            <br/><br/>
            計算結果示範 :    <br/><br/>
                           
            0.00 = 0            <br/>
            0.30 = 1            <br/>
            1.00 = 1            <br/>
            1.10 = 2            <br/>
            -1.00 = -1          <br/>
            -1.10 = -1          <br/>
                                <br/>
            </remarks>
            <example>
            <code>
            decimal dValue;
            //
            dValue = (decimal)HISSystem.Ceiling(2.10); &lt;- 結果為 3 
            ...
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Floor(System.Object)">
            <summary>
            最大數值.
            </summary>
            <param name="Value">來源數值.</param>
            <returns>小於或等於來源數值的最大數值.</returns>
            <remarks>
            若來源數值含小數點, 來源數值為正數則忽略小數點, 來源數值為負數則為整數位數 - 1.
            <br/><br/>
            結果值皆無小數點.
            <br/><br/>
            計算結果示範 :    <br/><br/>
                                
            2.10 => 2           <br/>
            2.00 => 2           <br/>
            1.90 => 1           <br/>
            1.10 => 1           <br/>
            1.00 => 1           <br/>
            -1.00 => -1         <br/>
            -2.10 => -3         <br/>
                                <br/>
            </remarks>
            <example>
            <code>
            decimal dValue;
            //
            dValue = (decimal)HISSystem.Floor(2.10); &lt; 結果為 2
            ...   
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.Sqrt(System.Object)">
            <summary>
            平方根.
            </summary>
            <param name="Value">數值來源.</param>
            <returns>平方根結果.</returns>
            <example>
            平方根 :
            <code>
            decimal dSqrt;
            //    
            dSqrt = (decimal)HISSystem.Sqrt(LoopRow["Value"]);  
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISSystem.BitwiseOr(System.String,System.String)">
            <summary>
            位元字串 OR 運算.
            </summary>
            <param name="S1">位元字串.</param>
            <param name="S2">位元字串.</param>
            <returns>位元字串 OR 運算, 如 1101 | 0000 = 1101 等.</returns>
            <remarks>
            若 <i>S1</i>, <i>S2</i> 其一位元字串長度不同將自動補足左方 0.
            <br/><br/>
            <i>S1</i>, <i>S2</i> 皆為空白則傳回空值('').
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISSystem.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            是否按下按鍵.
            </summary>
            <param name="AKey">按鍵(Keys).</param>
            <returns>是否按下按鍵.</returns>
            <remarks>
            此方法一般僅應用於判斷左/右 Alt, Shift, Control 等按鍵.
            <br/><br/>
            *另外, Form.IsKeyLocked() 可用於判斷 Caps Lock, Insert, Num Lock, Scroll Lock 等按鍵是否鎖定.
            </remarks>
        </member>
        <member name="P:HIS.Systems.HISSystem.RemoteServer">
            <summary><b>僅內部使用.</b></summary>
        </member>
        <member name="P:HIS.Systems.HISSystem.RemoteServerText">
            <summary><b>僅內部使用.</b></summary>
        </member>
        <member name="P:HIS.Systems.HISSystem.SystemFileName">
            <summary>
            目前使用者的系統程式檔案名稱.
            </summary>
            <remarks><b>限內部使用.</b></remarks>
        </member>
        <member name="T:HIS.Systems.HISSystemMetrics">
            <summary>
            作業系統制定資訊.
            </summary>
            <remarks>
            作業系統制定資訊, 即使用 Win32API 函式 GetSystemMetrics() 讀取視窗作業系統的視窗屬性, 如視窗標題高度, 水平/垂直捲軸高度等.
            <br/><br/>
            *HISWindows 提供讀取的相關方法/常數等.
            </remarks>
        </member>
        <member name="P:HIS.Systems.HISSystemMetrics.HScrollHeight">
            <summary>
            水平捲軸高度.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISSystemMetrics.VScrollWidth">
            <summary>
            垂直捲軸寬度.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISConsole">
            <summary>
            自訂 Console 類別.
            </summary>
        </member>
        <member name="T:HIS.Systems.HISEnum">
            <summary>
            列舉方法類別.
            </summary>
            <remarks>用於簡化自訂列舉型態解析等, 來源數值皆不分大小寫(與 Enum 不同).</remarks>
        </member>
        <member name="M:HIS.Systems.HISEnum.GetName(System.Object)">
            <summary>
            讀取列舉數值名稱.
            </summary>
            <param name="AValue">列舉數值.</param>
            <returns>列舉數值名稱.</returns>
            <exception cref="T:System.Exception">若列舉數值為 null 或列舉型態尚無支援等將引發例外</exception>
        </member>
        <member name="M:HIS.Systems.HISEnum.GetValue(System.Type,System.String)">
            <summary>
            讀取列舉數值名稱的列舉數值.
            </summary>
            <param name="AEnumType">列舉型態.</param>
            <param name="sValue">列舉數值名稱.</param>
            <returns>列舉數值, 若列舉數值名稱不存在將傳回 null.</returns>
        </member>
        <member name="M:HIS.Systems.HISEnum.ParseDateType(System.String,HIS.Systems.HISDateType)">
            <summary>
            解析 HISDateType.
            </summary>
            <param name="sValue">列舉數值名稱.</param>
            <param name="DefaultValue">替代列舉數值.</param>
            <returns>列舉數值, 若列舉數值名稱不存在則傳回替代列舉數值.</returns>
        </member>
        <member name="M:HIS.Systems.HISEnum.ParseDateTimeFormat(System.String,HIS.Systems.HISDateTimeFormat)">
            <summary>
            解析 HISDateTimeFormat.
            </summary>
            <param name="sValue">列舉數值名稱.</param>
            <param name="DefaultValue">替代列舉數值.</param>
            <returns>列舉數值, 若列舉數值名稱不存在則傳回替代列舉數值.</returns>
        </member>
        <member name="T:HIS.Systems.HISScreenDocument">
            <summary>
            螢幕列印方法類別.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISScreenDocument.CopyScreenImage(System.Windows.Forms.Control)">
            <summary>
            複製視窗螢幕 Image.
            </summary>
            <param name="AControl">列印的控制項物件 若列印全螢幕則傳入 null.</param>
            <returns>控制項畫面 Image.</returns>
        </member>
        <member name="M:HIS.Systems.HISScreenDocument.PrintScreen(System.Windows.Forms.Form)">
            <summary>
            列印螢幕.
            </summary>
            <param name="AForm">列印的視窗物件, 若列印全螢幕則傳入 null.</param>
            <remarks>若發生例外將以錯誤對話盒提示.</remarks>
        </member>
        <member name="M:HIS.Systems.HISScreenDocument.PrintScreen(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            列印指定控制項
            </summary>
            <param name="AControl">要列印的控制項</param>
            <param name="isLandscape">控制是否為橫印</param>
        </member>
        <member name="P:HIS.Systems.HISScreenDocument.Image">
            <summary>
            列印 Image.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISScreenDocument.ClientForm">
            <summary>
            視窗.
            </summary>
        </member>
        <member name="P:HIS.Systems.HISScreenDocument.ClientControl">
            <summary>
            控制項
            </summary>
        </member>
        <member name="T:HIS.Data.Common.BdpType">
            <summary>
            Db type of command object
            </summary>
        </member>
        <member name="T:HIS.Systems.HISExtendedProperties">
            <summary>
            延伸屬性.
            </summary>
            <remarks>非必要請勿使用.</remarks>
        </member>
        <member name="M:HIS.Systems.HISExtendedProperties.SetString(System.Object,System.String,System.String)">
            <summary>
            設定欄位延伸屬性.
            </summary>
            <param name="AObject">物件.</param>
            <param name="sKey">延伸 Key, 不分大小寫.</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISExtendedProperties.SetString(System.Object[],System.String,System.String)">
            <summary>
            設定欄位延伸屬性.
            </summary>
            <param name="Objects">物件.</param>
            <param name="sKey">延伸 Key, 不分大小寫.</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISExtendedProperties.SetInteger(System.Object,System.String,System.Int32)">
            <summary>
            設定欄位延伸屬性.
            </summary>
            <param name="AObject">物件.</param>
            <param name="sKey">延伸 Key, 不分大小寫.</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISExtendedProperties.SetInteger(System.Object[],System.String,System.Int32)">
            <summary>
            設定欄位延伸屬性.
            </summary>
            <param name="Objects">物件.</param>
            <param name="sKey">延伸 Key, 不分大小寫.</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISExtendedProperties.SetBoolean(System.Object,System.String,System.Boolean)">
            <summary>
            設定欄位延伸屬性.
            </summary>
            <param name="AObject">物件.</param>
            <param name="sKey">延伸 Key, 不分大小寫.</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISExtendedProperties.SetBoolean(System.Object[],System.String,System.Boolean)">
            <summary>
            設定欄位延伸屬性.
            </summary>
            <param name="Objects">物件.</param>
            <param name="sKey">延伸 Key, 不分大小寫.</param>
            <param name="Value">數值.</param>
        </member>
        <member name="M:HIS.Systems.HISColumnProperties.SetReadOnly(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            設定欄位 "唯讀" 狀態.
            </summary>
            <param name="ATable">資料表格.</param>
            <param name="sColumnNames">欄位名稱, 如 'Column1', 'Column1, Column2, ...' 等.</param>
            <param name="bReadOnly">是否唯讀.</param>
            <exception cref="T:System.Exception">若資料表格為 null 或資料欄位不存在將引發例外.</exception>
            <remarks>
            唯讀 - 為儲存時忽略該欄位, 實際欄位值仍可修改.
            <br/><br/>
            *此方法另外設定欄位允許 NULL (避免同名 NOT NULL 欄位存在造成輸入資料檢核判斷錯誤), 其他方法請參照方法說明.
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISColumnProperties.SetMaxLength(System.Data.DataColumn,System.Int32)">
            <summary>
            設定欄位編輯的最大長度.
            </summary>
            <param name="AColumn">欄位物件.</param>
            <param name="iMaxLength"></param>
        </member>
        <member name="M:HIS.Systems.HISColumnProperties.GetMaxLength(System.Data.DataColumn)">
            <summary>
            讀取欄位最大長度.
            </summary>
            <param name="AColumn">資料欄位.</param>
            <returns>欄位長度, 若欄位長度延伸屬性(DataColumn.ExtendedProperties)不存在則傳回 0.</returns>
            <remarks>
            此方法一般應用於字串欄位, 欄位長度為 TextBox 使用格式(即無限制長度則最大長度為 0).
            <br/><br/>
            DataColumn/TextBox 兩者最大長度定義不同 : <br/>
            .TextBox, 無限制長度則 MaxLength 為 0
            .DataColumn, 無限制長度則 MaxLength 為 -1 (但數字欄位不可設定最大長度否則將引發例外)
            </remarks>
        </member>
        <member name="M:HIS.Systems.HISColumnProperties.GetMaxLength(System.Data.DataColumn,System.Int32)">
            <summary>
            讀取欄位長度.
            </summary>
            <param name="AColumn">資料欄位.</param>
            <param name="iDefault">預設值, 若欄位長度延伸屬性(DataColumn.ExtendedProperties)不存在時使用.</param>
            <returns>欄位長度, 若欄位長度延伸屬性(DataColumn.ExtendedProperties)不存在則傳回預設值.</returns>
        </member>
        <member name="T:HIS.Systems.HISTableProperties">
            <summary>
            資料表格延伸屬性.
            </summary>
        </member>
        <member name="M:HIS.Systems.HISException.RaiseEx(System.String)">
            <summary>
            引發例外(Exception).
            </summary>
            <param name="sMessage">例外訊息.</param>
            <remarks>RaiseEx() 方法為手動引發例外, 應用於非例外情況下的引發例外或例外情況下的重新引發例外.</remarks>
            <example>
            手動引發例外 :
            <code>
            if (...)
              ...;
            else if (...)
              ...;
            else 
              HISException.RaiseEx("參數錯誤.");
            </code>
            </example>
        </member>
        <member name="M:HIS.Systems.HISException.RaiseEx(System.String,System.Exception)">
            <summary>
            引發例外(Exception).
            </summary>
            <param name="sMessage">例外訊息.</param>
            <param name="Ex">例外物件, 為例外發生時取得的例外物件.</param>
            <remarks>RaiseEx() 方法為手動引發例外, 應用於非例外情況下的引發例外或例外情況下的重新引發例外.</remarks>
        </member>
        <member name="M:HIS.Systems.HISException.RaiseEx(System.String,System.Object[])">
            <summary>
            引發例外(Exception).
            </summary>
            <param name="sMessage">例外訊息.</param>
            <param name="ExceptionArgs">例外訊息格式化參數.</param>
            <remarks>RaiseEx() 方法為手動引發例外, 應用於非例外情況下的引發例外或例外情況下的重新引發例外.</remarks>
        </member>
        <member name="M:HIS.Systems.HISException.ShowEx(System.String)">
            <summary>
            顯示例外訊息後並引發例外.
            </summary>
            <param name="sMessage">例外訊息內容.</param>
            <remarks>一般應用於表格事件, 即顯示例外訊息後引發例外以取消欄位資料編輯.</remarks>
        </member>
        <member name="M:HIS.Systems.HISException.ShowEx(System.String,System.Object[])">
            <summary>
            顯示例外訊息後並引發例外.
            </summary>
            <param name="sMessage">例外訊息內容.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
        </member>
        <member name="M:HIS.Systems.HISException.ErrorDlg(System.String)">
            <summary>
            顯示例外訊息後並引發例外.
            </summary>
            <param name="sMessage">例外訊息內容.</param>
            <remarks>一般應用於表格事件, 即顯示例外訊息後引發例外以取消欄位資料編輯.</remarks>
        </member>
        <member name="M:HIS.Systems.HISException.ErrorDlg(System.String,System.Object[])">
            <summary>
            顯示例外訊息後並引發例外.
            </summary>
            <param name="sMessage">例外訊息內容.</param>
            <param name="MessageArgs">訊息格式化參數.</param>
        </member>
    </members>
</doc>
